<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[MAC系统下的相关优秀软件搜集]]></title>
      <url>http://geekarl.com/2017/12/06/mac-software/</url>
      <content type="html"><![CDATA[<!-- excerpt -->
<h3>软件包管理</h3>
<ul>
<li><a href="https://brew.sh/" target="_blank" rel="external">Homebrew</a> 绝对的包管理神器 已使用</li>
</ul>
<h3>邮件客户端</h3>
<ul>
<li><a href="http://airmailapp.com/" target="_blank" rel="external">Arimail</a>  非常简洁、易用的邮件客户端</li>
</ul>
<h3>效率管理</h3>
<ul>
<li><a href="http://www.hammerspoon.org/" target="_blank" rel="external">Hammerspoon</a> 被誉为一定要学会的工具</li>
<li><a href="https://www.rescuetime.com/" target="_blank" rel="external">RescueTime</a> 时间管理、时间分配统计</li>
<li><a href="https://mindnode.com/" target="_blank" rel="external">MindNode</a> 可全键盘操作、极简的思维导图工具</li>
</ul>
<h3>代码相关</h3>
<ul>
<li><a href="https://code.visualstudio.com/" target="_blank" rel="external">VScode</a> 微软家的产品, 比 Atom 更友好、速度更快</li>
<li><a href="https://www.sublimetext.com/" target="_blank" rel="external">sublimeText</a> 推荐的另外一款编译神器 <a href="http://www.jianshu.com/p/3cb5c6f2421c/" target="_blank" rel="external">参考配置教程</a></li>
<li><a href="https://macromates.com/" target="_blank" rel="external">textmate</a> 备选的IDE 有人说很好用</li>
<li><a href="https://coderunnerapp.com/" target="_blank" rel="external">codeRunner</a> 短代码测试神器，强烈推荐</li>
<li><a href="http://www.mweb.im/" target="_blank" rel="external">Mweb</a> 强大的Markdown编辑器 另外还有个<a href="http://25.io/mou/" target="_blank" rel="external">Mou</a>可以尝试</li>
</ul>
<h3>网络分析</h3>
<ul>
<li><a href="https://www.charlesproxy.com/" target="_blank" rel="external">Charles</a> 也叫「花瓶」，分析HTTP/HTTPS非常方便</li>
<li><a href="https://github.com/reorx/httpstat" target="_blank" rel="external">httpstat</a> 简单的python脚本 检测http相应和分析</li>
<li><a href="https://github.com/stedolan/jq" target="_blank" rel="external">jq</a> 可以直接在bash中cat相应JSON文件语法片段</li>
</ul>
<h3>下载器</h3>
<ul>
<li><a href="http://software.charliemonroe.net/downie.php" target="_blank" rel="external">Downie</a> 别浪费时间去找各种开源下载器了</li>
</ul>
<h3>文件传输云</h3>
<ul>
<li><a href="https://transfer.sh/" target="_blank" rel="external">transfer</a> 通过bash的shell脚本实现传输文件到服务器云</li>
<li><a href="https://syncthing.net/" target="_blank" rel="external">Syncthing</a> 在多设备间同步资料，除了电影一类的资料，放弃网盘吧</li>
</ul>
<h3>命令行进阶</h3>
<ul>
<li><a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="external">oh-my-zsh</a> 任何开机就要开命令行的人都该尝试一下</li>
<li><a href="https://www.alfredapp.com/" target="_blank" rel="external">Alfred</a> 知乎上有人说的神器 暂时不太懂 不明觉厉</li>
<li><a href="https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/z" target="_blank" rel="external">z/autojump</a> 缓存已经打开过的目录路径</li>
</ul>
<h3>管理软件</h3>
<ul>
<li><a href="https://1password.com/" target="_blank" rel="external">1password</a> 密码管理工具</li>
<li><a href="https://getpocket.com/mac/?a=mac" target="_blank" rel="external">Pocket</a> 网址收藏软件，对稍后观看的文档进行标记</li>
</ul>
<h3>学习类</h3>
<ul>
<li><a href="https://itunes.apple.com/cn/app/id734383760?mt=12" target="_blank" rel="external">每日英语学习</a> 最好的一款英语学习软件</li>
</ul>
<p><em>github上的<a href="https://github.com/kayo5994/UI-Development-Environment-on-Mac" target="_blank" rel="external">repo</a>针对前端的使用，可以多看看</em></p>
<p>软件的收集和使用是个积累的过程，因此有好的发现会在博客中同步更新，小的方面就会放在评论中。</p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[js线程机制的介绍和练习]]></title>
      <url>http://geekarl.com/2017/12/02/js-process-mechanism/</url>
      <content type="html"><![CDATA[<!-- excerpt -->
<blockquote>
<p>给定的几行代码，我们需要知道其输出内容和顺序。JavaScript是一门单线程语言，但有其独特的线程机制</p>
</blockquote>
<p>热身代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'定时器开始啦'</span>)</div><div class="line">&#125;);</div><div class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'马上执行for循环啦'</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)&#123;</div><div class="line">        i == <span class="number">99</span> &amp;&amp; resolve();</div><div class="line">    &#125;</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'执行then函数啦'</span>)</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'代码执行结束'</span>);</div></pre></td></tr></table></figure>
<h3>JavaScript事件循环</h3>
<ul>
<li>同步任务 -&gt; 主线程 -&gt; 任务顺序执行完毕</li>
<li>异步任务 -&gt; Event Table -&gt; EventQueue(并入主执行线程)</li>
</ul>
<p>同步和异步任务分别进入不同的执行&quot;场所&quot;，同步的进入主线程，异步的进入<code>Event Table</code>并注册函数。<br>
当指定的事情完成时，<code>Event Table</code>会将这个函数移入<code>Event Queue</code>。<br>
主线程内的任务执行完毕为空，会去<code>Event Queue</code>读取对应的函数，进入主线程执行。<br>
上述过程会不断重复，也就是常说的<code>Event Loop</code>(事件循环)。</p>
<p><em>JS引擎存在monitoring process进程，会持续不断的检查主线程执行栈是否为空，一旦为空，就会去Event Queue那里检查是否有等待被调用的函数。</em></p>
<h3>定时器线程</h3>
<ol>
<li><code>setTimeout</code>这个函数，是经过指定时间后，把要执行的任务加入到Event Queue中，又因为是单线程任务要一个一个执行，如果前面的任务需要的时间太久，那么只能等着</li>
<li><code>setTimeout(fn,0)</code>的含义是，指定某个任务在主线程最早可得的空闲时间执行，只要主线程执行栈内的同步任务全部执行完成，栈为空就马上执行。</li>
<li><code>setInterval</code>会每隔指定的时间将注册的函数置入Event Queue，如果前面的任务耗时太久，那么同样需要等待。</li>
<li>对于<code>setInterval(fn,ms)</code>来说，我们已经知道不是每过ms秒会执行一次fn，而是每过ms秒，会有fn进入Event Queue。</li>
</ol>
<p><em>一旦setInterval的回调函数fn执行时间超过了延迟时间ms，那么就完全看不出来有时间间隔了</em></p>
<h3>Promise与process.nextTick(callback)</h3>
<p>process.nextTick 指在node.js里面，事件循环的下一次循环中调用callback</p>
<p>除了广义的同步和异步任务，更精细的定义为：</p>
<blockquote>
<p>macro-task(宏任务)：包括整体代码script，setTimeout，setInterval<br>
micro-task(微任务)：Promise，process.nextTick<br>
接下来的主要介绍这两个任务的概念和线程表现:</p>
</blockquote>
<ol>
<li>这两种类型的任务会进入与之对应的EventQueue</li>
<li>事件循环的顺序，决定JS代码的执行顺序</li>
<li>先是进入整体代码的宏任务，开始事件循环，然后紧接着执行当前宏任务的微任务</li>
<li>执行完当前宏任务的微任务后 进入EventQueue里面的下一个宏任务</li>
</ol>
<p><img src="http://opm3cm6nh.bkt.clouddn.com/loop.jpg" alt="js两种任务机制"></p>
<h3>代码练习</h3>
<p>我们来分析一段较复杂的代码，看看你是否真的掌握了JS的执行机制</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">'1'</span>);</div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'2'</span>);</div><div class="line">    process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'3'</span>);</div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'4'</span>);</div><div class="line">        resolve();</div><div class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'5'</span>)</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line">process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'6'</span>);</div><div class="line">&#125;)</div><div class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'7'</span>);</div><div class="line">    resolve();</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'8'</span>)</div><div class="line">&#125;)</div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'9'</span>);</div><div class="line">    process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'10'</span>);</div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'11'</span>);</div><div class="line">        resolve();</div><div class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'12'</span>)</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>。<br>
。<br>
。<br>
。<br>
。<br>
。</p>
<p>标准答案：1 7 6 8 2 4 3 5 9 11 10 12</p>
<p>总结：</p>
<ul>
<li>JavaScript是一门单线程语言</li>
<li>Event Loop是JavaScript的执行机制</li>
<li>针对Promise的知识，<a href="https://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html" target="_blank" rel="external">这里</a>推荐一篇文章，非常值得一看</li>
</ul>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[fiddler抓包工具(windows)]]></title>
      <url>http://geekarl.com/2017/11/04/learnFiddler/</url>
      <content type="html"><![CDATA[<!-- excerpt -->
<p>在打开fiddler后，会在客户端和服务器之间自动增加一层127.0.0.1:8090的代理层，其表征为客户端的所有请求都要先经过Fiddler，然后转发到相应的服务器，反之，服务器端的所有响应，也都会先经过Fiddler然后发送到客户端。此时IE和chrome的浏览器相应代理设置将自动更改，其他浏览器要进行代理设置</p>
<p>默认情况下fiddler只能获取http请求，需在菜单项 Tools-&gt;Fiddler Options-&gt;HTTPS的选项卡中 CaptureHTTPS CONNECTs是默认勾选的，要手动勾选Decrypt HTTPS traffic和Ignore servercertificate errors两项（首次点击会弹出是否信任fiddler证书和安全提示，直接点击yes就行）</p>
<p>如果要启用手机端抓包，需要额外设置  Tools-&gt;Fiddler Options-&gt;Connections 中勾选allow remote computers to connect，并确认默认监听端口(8090),如果端口号有更改，需要重启生效，否则会出现无法上网的问题。对手机端的设置步骤如下：</p>
<ol>
<li>手机和电脑连接同一个网络，打开手机浏览器，输入http://ip:端口号(<a href="http://10.232.23.21:8090" target="_blank" rel="external">http://10.232.23.21:8090</a>)</li>
<li>在出现的Fiddler Echo Service页，点击最下面的FiddlerRootcertificate下载并安装此证书(需要自行重命名)</li>
<li>如果手机没设置密码，可能还要设置一下，以通过证书的安装认证</li>
<li>此时可以通过让手机和电脑在一个局域网中，手机连上相应wlan后，设置次wifi的代理，主机名为电脑的ip，端口为fiddler的代理端口，点击确定即可</li>
</ol>
<p>如果需要停止代理，手机上直接重置wifi的代理，并在设置——安全——受信任的凭证——用户 里点击相关安装证书删除即可。</p>
<p><a href="http://blog.csdn.net/gld824125233/article/details/52588275" target="_blank" rel="external">参考链接</a></p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[接触到的git的三个重要知识点]]></title>
      <url>http://geekarl.com/2017/08/16/My-Git-Knowledge/</url>
      <content type="html"><![CDATA[<!-- excerpt -->
<h2>git配置多个SSH-Key</h2>
<ol>
<li>
<p>生成第一个需要的SSH-Key(比如公司用的)</p>
<p><code>$ ssh-keygen -t rsa -C &quot;emailname@company.com&quot; -f ~/.ssh/id_rsa</code><br>
这样就会在对应目录下生成<code>id_rsa</code>和<code>id_rsa.pub</code>私钥和公钥, 公钥里面的内容需要粘贴到公司服务器的ssh-key配置中</p>
</li>
<li>
<p>生成一个github用的SSH-Key(第二个key)</p>
<p><code>$ ssh-keygen -t rsa -C &quot;yourname@your.com&quot; -f ~/.ssh/github_rsa</code><br>
还在同一个路径里面，把公钥的内容粘贴到github服务器的SSH-key配置中</p>
</li>
<li>
<p>在本机上添加两个私钥</p>
<p><code>$ ssh-add ~/.ssh/id_rsa</code><br>
<code>$ ssh-add ~/.ssh/github_rsa</code><br>
如果执行时提示&quot;Could not open a connection to your authentication agent&quot;,则执行以下命令<br>
<code>ssh-agent bash</code> 再运行<code>ssh-add</code>命令</p>
</li>
<li>
<p>修改(增加)配置文件<br>
在<code>~/.ssh</code>目录下新建<code>config</code>文件： <code>touch config</code><br>
添加内容如下：(hostName是git地址最开头的那块：git@git.n.mifan.com:flash/flash-wap.git <a href="http://xn--git-ww0f445b.n.mifan.com" target="_blank" rel="external">就是git.n.mifan.com</a>)<br>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># gitlab(根据不同公司配置来修改, 实质是对不同的git地址 指定不同的私钥)</span></div><div class="line">Host gitlab.com</div><div class="line">    HostName gitlab.com</div><div class="line">    PreferredAuthentications publickey</div><div class="line">    IdentityFile ~/.ssh/id_rsa</div><div class="line"><span class="comment"># github</span></div><div class="line">Host github.com</div><div class="line">    HostName github.com</div><div class="line">    PreferredAuthentications publickey</div><div class="line">    IdentityFile ~/.ssh/github_rsa</div></pre></td></tr></table></figure></p>
</li>
<li>
<p>确认目录结构并测试<br>
<code>$ ssh -T git@github.com</code><br>
输出You’ve successfully authenticated, but GitHub does not provide shell access字样 表示配置成功</p>
</li>
</ol>
<h2>git使用cherry-pick</h2>
<blockquote>
<p>主要的功能是提交过程的重演，从而可以灵活地调整commit的历程</p>
</blockquote>
<ol>
<li>
<p>一种应用场景是在A分支的提交发现应该提交到B分支，在B分支上cherry-pick，A分支上git reset --hard 分支hash</p>
<p>用法: <code>git cherry-pick &lt;commit id&gt;</code> 对已经存在的commit进行二次apply<br>
先<code>git log</code>，然后<code>git checkout old_b</code>, 在这个旧分支上进行<code>git cherry-pick 309u5j0438u0948v090948v5903w</code>(log中的hash值 可多个)</p>
</li>
<li>
<p>要把dev-3.0分支上的某些更改移到dev-2.x的版本上, 产品开发的灵活上线需求</p>
<p>首先新建一个要在其上应用cherry-pick的分支  <code>git checkout -b release-2.1 release-2.0</code>,<br>
将dev-3.0分支上的commit在release-2.1分支上重演 <code>git cherry-pick dev-3.0分支上的某些commit-hash</code><br>
例如：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git cherry-pick  </div><div class="line">20c2f506d789bb9f041050dc2c1e954fa3fb6910 </div><div class="line">2633961a16b0dda7b767b9264662223a2874dfa9 </div><div class="line">5d5929eafd1b03fd4e7b6aa15a6c571fbcb3ceb4</div></pre></td></tr></table></figure>
<p>多个commit-hash使用空格分割，commit-hash最好按照提交时间先后排列，最先提交的放在最前面</p>
</li>
</ol>
<p>但要注意这个特性不要乱用 大部分可能使rebase使用情况不要用cherry-pick 会简单问题复杂化</p>
<h2>git链接远程仓库及取消</h2>
<p>查看当前的远程仓库的命令: <code>git remote -v</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 添加</span></div><div class="line">git remote add origin git@url</div><div class="line"><span class="comment"># 删除</span></div><div class="line">git remote rm origin</div><div class="line"><span class="comment"># 修改</span></div><div class="line">git remote origin <span class="built_in">set</span>-url git@url</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[学习git常用及高阶命令]]></title>
      <url>http://geekarl.com/2017/07/09/gitLearn/</url>
      <content type="html"><![CDATA[<!-- excerpt -->
<blockquote>
<p>几个常用的git命令情景</p>
</blockquote>
<ul>
<li>复制代码仓库 <code>git clone --bare|--mirror|--non-bare /var/www/html/myrepo.git</code></li>
<li>后悔药 覆盖最后一次修改 <code>git add . git commit --amend git push origin master -f</code></li>
<li>Git 放弃本地修改 <code>git checkout . &amp;&amp; git clean -df</code></li>
<li>Git 销毁最后一次提交 <code>git reset --hard HEAD^ git push -f origin HEAD^:master</code></li>
<li>打包嵌入版本号到文件 <code>git rev-parse HEAD &gt; version.txt</code></li>
<li>本地拉取远程git仓库 <code>git init &amp;&amp; git remote add origin git@项目地址</code></li>
<li>PUSH前关联git的远程仓库 <code>git branch --set-upstream debug origin/debug</code></li>
<li>建立已有关联关系的本地分支<code>git checkout --track origin/dev-zhengqigit</code></li>
</ul>
<blockquote>
<p>实用的高级Git命令(10条)</p>
</blockquote>
<ul>
<li>输出最后一次提交的改变 <code>git archive -o ../updated.zip HEAD $(git diff --name-only HEAD^)</code><br>
<em>它会输出最近提交的修改类容到一个zip文件中。</em></li>
<li>输出两个提交间的改变 <code>git archive -o ../latest.zip NEW_COMMIT_ID_HERE $(git diff --name-only OLD_COMMIT_ID_HERE NEW_COMMIT_ID_HERE)</code></li>
<li>克隆 指定的远程分支 如果你渴望只克隆远程仓库的一个指定分支，而不是整个仓库分支，这对你帮助很大。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git init</div><div class="line">git remote add -t BRANCH_NAME_HERE <span class="_">-f</span> origin REMOTE_REPO_URL_PATH_HERE</div><div class="line">git checkout BRANCH_NAME_HERE</div></pre></td></tr></table></figure>
<ul>
<li>开始一个无历史的新分支 <code>git checkout --orphan NEW_BRANCH_NAME_HERE</code></li>
<li>不想切换分支，但是又想从其它分支中获得你需要的文件 <code>git checkout BRANCH_NAME_HERE -- PATH_TO_FILE_IN_BRANCH_HERE</code></li>
<li>同一branch协同工作，让git忽视某一指定文件的变动,防止merge覆盖 <code>git update-index --assume-unchanged PATH_TO_FILE_HERE</code></li>
<li>检查提交的变动是否是release的一部分 <code>git name-rev --name-only COMMIT_HASH_HERE</code></li>
<li>实用rebase替代merge完成推送<br>
<em>但是在多团队成员共同工作于一条branch的情形中，常规的merge会导致log中出现多条消息，从而产生混淆。因此，您可以在pull的时候使用rebase，以此来减少无用的merge消息，从而保持历史记录的清晰。</em></li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git pull --rebase</div><div class="line"><span class="comment">#将某条branch配置为总是使用rebase推送</span></div><div class="line">git config branch.BRANCH_NAME_HERE.rebase <span class="literal">true</span></div></pre></td></tr></table></figure>
<ul>
<li>检测 你的分支的改变是否为其它分支的一部分<br>
<em>cherry命令让我们检测你的分支的改变是否出现在其它一些分支中。它通过+或者-符号来显示从当前分支与所给的分支之间的改变：是否合并了(merged)。.+ 指示没有出现在所给分支中，反之，- 就表示出现在了所给的分支中了</em></li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git cherry -v OTHER_BRANCH_NAME_HERE</div><div class="line"><span class="comment">#例如: 检测master分支</span></div><div class="line">git cherry -v master</div></pre></td></tr></table></figure>
<ul>
<li>检查提交的变动是否是release的一部分 <code>git name-rev --name-only COMMIT_HASH_HERE</code></li>
</ul>
<blockquote>
<p>关于垃圾回收的 用来备忘</p>
</blockquote>
<ul>
<li>Git 垃圾回收  <code>git gc --auto</code></li>
<li>Git 仓库占用空间  <code>$ du -hs .git/objects 45M .git/objects</code></li>
<li>清理历史中的文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git filter-branch --force --index-filter &apos;git rm --cached --ignore-unmatch ****/nohup.out&apos; --prune-empty --tag-name-filter cat -- --all git filter-branch --index-filter &apos;git rm --cached --ignore-unmatch ****/nohup.out&apos; HEAD git for-each-ref --format=&quot;%(refname)&quot; refs/original/ | xargs -n 1 git update-ref -d</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[纯前端json数据生成excel下载的实现]]></title>
      <url>http://geekarl.com/2017/06/09/excel/</url>
      <content type="html"><![CDATA[<!-- excerpt -->
<h3>引入工具</h3>
<p>本项目是使用vue2.0的后端项目, 用的ES6的模块化语法。<br>
<a href="https://github.com/eligrey/FileSaver.js" target="_blank" rel="external">file-saver</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">npm install file-saver --save-dev</div><div class="line"></div><div class="line">// 在文件中引入并使用并触发下载的model。</div><div class="line">import &#123; saveAs &#125; from &apos;file-saver&apos;;</div><div class="line"></div><div class="line">saveAs(new Blob([],&#123;&#125;), name);</div></pre></td></tr></table></figure>
<h3>另存为CSV格式的文件</h3>
<p>本质流程是将json数据转换为对应csv格式 在excel表格里面展现出来。关键点如下：</p>
<ul>
<li>csv的分隔符规定: 逗号是单元格之间的分隔 <code>\n</code>是表格换行。</li>
<li>本质是文本文件输出，注意saveAs中对输出的Blob对象的相关参数配置。</li>
<li>生成的excel如果细心，会发现时间列会出现丢失0的情况，如何使其按照文本输出？</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">methods:&#123;</div><div class="line">    generateJson() &#123; <span class="comment">//生成所需json数据逻辑</span></div><div class="line">        <span class="keyword">let</span> liveStreamId = <span class="string">''</span>;</div><div class="line">        <span class="keyword">let</span> listLength = <span class="keyword">this</span>.list.length;</div><div class="line">        <span class="keyword">let</span> arr = [];</div><div class="line">        <span class="keyword">let</span> typeMap = &#123;</div><div class="line">            <span class="string">'MATCH'</span>: <span class="string">'赛事'</span>,</div><div class="line">            <span class="string">'PROGRAM'</span>: <span class="string">'自制节目'</span>,</div><div class="line">            <span class="string">'OTHER'</span>: <span class="string">'其他节目'</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; listLength; i++) &#123;</div><div class="line">            <span class="keyword">var</span> &#123;type, cid, name, startTime, endTime&#125; = <span class="keyword">this</span>.list[i];</div><div class="line">            <span class="comment">// 加\t是制表符  从而不让时间中的0丢失 解决了上面提出的问题</span></div><div class="line">            startTime = startTime ? <span class="string">"\t"</span> + moment(startTime, <span class="string">'YYYYMMDDHHmmss'</span>).format(<span class="string">'YYYY-MM-DD HH:mm:ss'</span>) : <span class="string">" "</span>;</div><div class="line">            endTime = endTime ? <span class="string">"\t"</span> + moment(endTime, <span class="string">'YYYYMMDDHHmmss'</span>).format(<span class="string">'YYYY-MM-DD HH:mm:ss'</span>) : <span class="string">" "</span>;</div><div class="line">            type = typeMap[type];</div><div class="line">            <span class="keyword">let</span> streamLength = <span class="keyword">this</span>.list[i].liveStreams.length;</div><div class="line">            <span class="keyword">if</span> (streamLength &gt; <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; streamLength; j++) &#123;</div><div class="line">                    liveStreamId = <span class="keyword">this</span>.list[i].liveStreams[j].id;</div><div class="line">                    <span class="keyword">let</span> obj = &#123;type, cid, name, startTime, endTime, liveStreamId&#125;;</div><div class="line">                    arr.push(obj);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                liveStreamId = <span class="keyword">this</span>.list[i].liveStreams.length ? <span class="keyword">this</span>.list[i].liveStreams[<span class="number">0</span>].id : <span class="string">''</span>;</div><div class="line">                <span class="keyword">let</span> obj = &#123;type, cid, name, startTime, endTime, liveStreamId&#125;;</div><div class="line">                arr.push(obj);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> arr;</div><div class="line">    &#125;,</div><div class="line">    dataToCSV(data) &#123;</div><div class="line">        <span class="keyword">let</span> dataArr = [];</div><div class="line">        <span class="keyword">let</span> titleArr = [<span class="string">'节目类型'</span>, <span class="string">'节目名称'</span>, <span class="string">'开始时间'</span>, <span class="string">'结束时间'</span>, <span class="string">'直播流id'</span>]; <span class="comment">//表头</span></div><div class="line">        <span class="keyword">let</span> dataKeys = [<span class="string">'type'</span>, <span class="string">'name'</span>, <span class="string">'startTime'</span>, <span class="string">'endTime'</span>, <span class="string">'liveStreamId'</span>];</div><div class="line">        dataArr.push(titleArr.join(<span class="string">','</span>));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; data.length; j++) &#123;</div><div class="line">            <span class="keyword">let</span> itemArr = [];</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; dataKeys.length; i++) &#123;</div><div class="line">                itemArr.push(data[j][dataKeys[i]]);</div><div class="line">            &#125;</div><div class="line">            dataArr.push(itemArr.join(<span class="string">','</span>));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dataArr.join(<span class="string">'\n'</span>);</div><div class="line">    &#125;,</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getCSV</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">let</span> dataJson = <span class="keyword">this</span>.generateJson();</div><div class="line">        <span class="keyword">let</span> dataJson = [];</div><div class="line">        <span class="keyword">let</span> csvContent = dataToCSV(dataJson);</div><div class="line">        <span class="keyword">let</span> today = moment().format(<span class="string">'YYYY-MM-DD'</span>);</div><div class="line">        <span class="keyword">let</span> excelName = <span class="string">"直播.csv"</span>;</div><div class="line">        <span class="comment">// "\ufeff"是用来放置乱码加上的</span></div><div class="line">        saveAs(</div><div class="line">            <span class="keyword">new</span> Blob([<span class="string">"\ufeff"</span> + csvContent], &#123;<span class="attr">type</span>: <span class="string">"text/plain;charset=utf8"</span>&#125;),</div><div class="line">            excelName</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 在vue中 点击按钮触发getCSV函数即可进行下载</span></div></pre></td></tr></table></figure>
<p>缺点: 不能控制excel的格式，打开后都是默认单元格的大小，很不合理</p>
<p><em>参考链接奉上：<a href="http://www.cnblogs.com/dojo-lzz/p/4837041.html" target="_blank" rel="external">http://www.cnblogs.com/dojo-lzz/p/4837041.html</a></em></p>
<h3>另存为xls格式的文件</h3>
<p>为了解决excel的样式问题，这是最后采用的方案，原理是excel是xml类型的数据，关键点如下：</p>
<ul>
<li>这个可以通过对table设置样式，从而易用性得到了大大的增强，流程基本没有变化</li>
<li>本质是通过拼接xml字符串来写入文件中，并设置文件后缀名位xml。</li>
<li>时间列会出现丢失0的情况，这次不能用制表符避免，经查阅发现<code>&amp;nbsp</code>可以解决。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">methods: &#123;</div><div class="line">    generateJson() &#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">        startTime = startTime ? moment(startTime, <span class="string">'YYYYMMDDHHmmss'</span>).format(<span class="string">'YYYY-MM-DD HH:mm:ss'</span>) : <span class="string">" "</span>;</div><div class="line">        endTime = endTime ? moment(endTime, <span class="string">'YYYYMMDDHHmmss'</span>).format(<span class="string">'YYYY-MM-DD HH:mm:ss'</span>) : <span class="string">" "</span>;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;,</div><div class="line">    dataToExcel(data) &#123;</div><div class="line">        <span class="keyword">let</span> style = <span class="string">"color:Black;background-color:White;border-color:#CCCCCC;border-width:1px;border-style:None;width:100%;border-collapse:collapse;font-size:12pt;text-align:center;"</span>;</div><div class="line">        <span class="keyword">let</span> excel = <span class="string">'&lt;table cellspacing="0" rules="rows" border="1" style='</span> + style + <span class="string">'&gt;'</span>;</div><div class="line">        <span class="keyword">let</span> titleArr = [<span class="string">'节目类型'</span>, <span class="string">'节目名称'</span>, <span class="string">'开始时间'</span>, <span class="string">'结束时间'</span>, <span class="string">'直播流id'</span>];</div><div class="line">        <span class="keyword">let</span> dataKeys = [<span class="string">'type'</span>, <span class="string">'name'</span>, <span class="string">'startTime'</span>, <span class="string">'endTime'</span>, <span class="string">'liveStreamId'</span>];</div><div class="line">        <span class="keyword">let</span> row = <span class="string">'&lt;tr style="font-size:15pt;font-weight:700;text-align:center;"&gt;'</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; titleArr.length; i++) &#123;</div><div class="line">            row += <span class="string">"&lt;td&gt;"</span> + titleArr[i] + <span class="string">"&lt;/td&gt;"</span>;</div><div class="line">        &#125;</div><div class="line">        excel += row + <span class="string">"&lt;/tr&gt;"</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; data.length; j++) &#123;</div><div class="line">            <span class="keyword">let</span> row = <span class="string">"&lt;tr&gt;"</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; dataKeys.length; i++) &#123;</div><div class="line">                <span class="comment">// 处理时间丢失0的问题</span></div><div class="line">                <span class="keyword">if</span> (dataKeys[i] === <span class="string">'startTime'</span> || dataKeys[i] === <span class="string">'endTime'</span>) &#123;</div><div class="line">                    row += <span class="string">"&lt;td&gt;&amp;nbsp;"</span> + data[j][dataKeys[i]] + <span class="string">"&lt;/td&gt;"</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    row += <span class="string">"&lt;td&gt;"</span> + data[j][dataKeys[i]] + <span class="string">"&lt;/td&gt;"</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            excel += row + <span class="string">"&lt;/tr&gt;"</span>;</div><div class="line">        &#125;</div><div class="line">        excel += <span class="string">"&lt;/table&gt;"</span>;</div><div class="line">        <span class="keyword">return</span> excel;</div><div class="line">    &#125;,</div><div class="line">    generateExcel(excel) &#123;</div><div class="line">        <span class="keyword">var</span> excelFile = <span class="string">"&lt;html xmlns:o='urn:schemas-microsoft-com:office:office' xmlns:x='urn:schemas-microsoft-com:office:excel' xmlns='http://www.w3.org/TR/REC-html40'&gt;"</span>;</div><div class="line">        excelFile += <span class="string">'&lt;meta http-equiv="content-type" content="application/vnd.ms-excel; charset=UTF-8"&gt;'</span>;</div><div class="line">        excelFile += <span class="string">'&lt;meta http-equiv="content-type" content="application/vnd.ms-excel'</span>;</div><div class="line">        excelFile += <span class="string">'; charset=UTF-8"&gt;'</span>;</div><div class="line">        excelFile += <span class="string">"&lt;head&gt;"</span>;</div><div class="line">        excelFile += <span class="string">"&lt;!--[if gte mso 9]&gt;"</span>;</div><div class="line">        excelFile += <span class="string">"&lt;xml&gt;"</span>;</div><div class="line">        excelFile += <span class="string">"&lt;x:ExcelWorkbook&gt;"</span>;</div><div class="line">        excelFile += <span class="string">"&lt;x:ExcelWorksheets&gt;"</span>;</div><div class="line">        excelFile += <span class="string">"&lt;x:ExcelWorksheet&gt;"</span>;</div><div class="line">        excelFile += <span class="string">"&lt;x:Name&gt;"</span>;</div><div class="line">        excelFile += <span class="string">"&#123;worksheet&#125;"</span>;</div><div class="line">        excelFile += <span class="string">"&lt;/x:Name&gt;"</span>;</div><div class="line">        excelFile += <span class="string">"&lt;x:WorksheetOptions&gt;"</span>;</div><div class="line">        excelFile += <span class="string">"&lt;x:DisplayGridlines/&gt;"</span>;</div><div class="line">        excelFile += <span class="string">"&lt;/x:WorksheetOptions&gt;"</span>;</div><div class="line">        excelFile += <span class="string">"&lt;/x:ExcelWorksheet&gt;"</span>;</div><div class="line">        excelFile += <span class="string">"&lt;/x:ExcelWorksheets&gt;"</span>;</div><div class="line">        excelFile += <span class="string">"&lt;/x:ExcelWorkbook&gt;"</span>;</div><div class="line">        excelFile += <span class="string">"&lt;/xml&gt;"</span>;</div><div class="line">        excelFile += <span class="string">"&lt;![endif]--&gt;"</span>;</div><div class="line">        excelFile += <span class="string">"&lt;/head&gt;"</span>;</div><div class="line">        excelFile += <span class="string">"&lt;body&gt;"</span>;</div><div class="line">        excelFile += excel;</div><div class="line">        excelFile += <span class="string">"&lt;/body&gt;"</span>;</div><div class="line">        excelFile += <span class="string">"&lt;/html&gt;"</span>;</div><div class="line">        <span class="keyword">return</span> excelFile;</div><div class="line">    &#125;</div><div class="line">    getExcel() &#123;</div><div class="line">        <span class="keyword">let</span> dataJson = <span class="keyword">this</span>.generateJson();</div><div class="line">        <span class="keyword">let</span> excelContent = <span class="keyword">this</span>.dataToExcel(dataJson);</div><div class="line">        <span class="keyword">let</span> today = moment().format(<span class="string">'YYYY-MM-DD'</span>);</div><div class="line">        <span class="keyword">let</span> excelName = today + <span class="string">"直播.xls"</span>;</div><div class="line">        <span class="keyword">let</span> excel = <span class="keyword">this</span>.generateExcel(excelContent);</div><div class="line">        saveAs(</div><div class="line">            <span class="keyword">new</span> Blob([excel], &#123;<span class="attr">type</span>: <span class="string">"application/vnd.ms-excel;charset=utf-8"</span>&#125;),</div><div class="line">            excelName</div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 在vue中 点击按钮触发getExcel函数即可进行下载</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>参考链接奉上：<a href="http://blog.csdn.net/educast/article/details/52775559" target="_blank" rel="external">http://blog.csdn.net/educast/article/details/52775559</a></em></p>
<p>使用node做后端来返回excel文件 参考此库<a href="https://github.com/rikkertkoppes/json2xls" target="_blank" rel="external">json2xls</a>。</p>
<p>心得: 这个过程有人已经封装为jquery插件，不过我是没有采用jquery依赖实现的,从<a href="https://github.com/kayalshri/tableExport.jquery.plugin" target="_blank" rel="external">github-tableExport</a>中获得不少启发。 另外还有<a href="https://www.npmjs.com/package/xlsx" target="_blank" rel="external">npm-xlsx</a>基本上要把Excel玩坏了  各种来回读取，有时间可以看看。文件的本质就是各种数据流的操作，现在浏览器真心是越来越强大，期待HTML5的文件API被广为支持的一天。</p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[前端性能优化总结(简略)]]></title>
      <url>http://geekarl.com/2017/06/03/fontend-optimize/</url>
      <content type="html"><![CDATA[<!-- excerpt -->
<h3>静态资源优化</h3>
<p><em>这方面主要是减少静态资源的加载时间 减少http请求的数量和时间上来考虑</em></p>
<ul>
<li>合并压缩css、js文件，制作雪碧图 压缩图片：减少http的请求次数，节省网络请求时间</li>
<li>静态资源cdn分发：客户端可以通过最佳的网络链路加载静态资源</li>
<li>静态资源缓存机制，从而减少不必要的请求</li>
<li>减少DNS的搜索时间  这个在前端处理的少一些</li>
</ul>
<h3>接口访问优化</h3>
<p><em>这个主要还是要从服务端入手，node必不可少</em></p>
<ul>
<li>首屏采用服务端渲染  可以使用node做到前后处理都用js语言</li>
<li>使用node来实现基于代理服务的接口合并方案 从而也减少了http请求</li>
</ul>
<h3>页面渲染速度的优化</h3>
<p><em>网页的一些约定速成的优化，但实际效果可能并不明显</em></p>
<ul>
<li>css放在顶部 实现优先渲染</li>
<li>js放在页面底部 从而避免阻塞</li>
<li>恰当的DOM结构 从而减少DOM元素的数量 减少DOM树的复杂度</li>
<li>img标签设置宽高，避免回流和重绘的影响(先有占位)</li>
<li>React和Vue等框架中虚拟DOM的渲染方案，减少了dom的开销</li>
</ul>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在Windows上切换node版本的实践]]></title>
      <url>http://geekarl.com/2017/03/23/nvm-windows-learning/</url>
      <content type="html"><![CDATA[<!-- excerpt -->
<h3>下载node切换软件</h3>
<p>在MAC下有大名鼎鼎的nvm，网上有很多成熟的教程。windows下也有“著名”的<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="external">nvm-windows</a> 实打实来说，这个挺好用的，不过我的打开方式有点歪~  现在来看一下这个go语言写成的工具有哪些需要注意的地方。<br>
项目的github链接为：<a href="https://github.com/coreybutler/nvm-windows/" target="_blank" rel="external">nvm-windows</a> 可以点击上一段的链接下载1.1.3版本的切换软件，如果更新了，那就要按照github中给出的最新文档来，这次有点费力就是吃了没看英文文档的亏。</p>
<h3>卸载电脑上已有的NODEJS和全局安装包</h3>
<p>重要的事儿本来该说三遍，这里只说一遍(管不着我~)，在控制面板中删除了nodejs后，一定要到<code>C:\Users\wanglixing\AppData\Roaming</code> 下搜罗下npm文件夹，这是nodejs的全局安装包的位置，打开最好截个图，从而得知之前安装了啥，很有可能各个项目都有依赖!!<br>
截图后删除npm文件夹，给nvm一个干净的安装环境，这一点网上有些教程就略去了，所以要注意这些提前工作，截图是为了安装好nvm-nodejs后给补回来。 这一步推荐看<a href="http://www.w2bc.com/article/189615" target="_blank" rel="external">这篇文章</a>，个人觉得是一堆文章里的一股清流，mac和windows下的提前准备工作都说的比较清楚。 可惜我是安装完了才删除的，提前工作没做好~。</p>
<h3>安装NVM软件</h3>
<p>这一步其实没啥技术含量，下载好软件，以管理员身份运行，规定安装到<code>C:\nvm</code>下，一直下一步就行了，没有什么需要警惕的全家桶(大雾)，安装好之后，我就百度了一下使用方法，get了几个指令，推荐看这个知乎上的教程：<a href="https://zhuanlan.zhihu.com/p/24698499" target="_blank" rel="external">安装管理多个版本的node.js</a>。如install、use、list之类的简单指令，其实用这个切换一点也不复杂，这几个够用了，不过用起来可费了一番力气。若教程失效，其实直接看github上的文档就行，这块的说明很简单的。</p>
<h3>切换安装源</h3>
<p>这就是最大的坑，我看了几篇教程，打开setting文件各种设置都不管用，最后返璞归真，从github的文档中才发现如何在国内切换到正确的安装源上。<br>
我一开始没切换，结果使用nvm install命令总是报连不上服务器，没法获取版本地址，大概试了10次，后来在说明文档上发现需要用命令进行设置，其实本质也是写到setting文件中，具体为：</p>
<ul>
<li><code>nvm node_mirror https://npm.taobao.org/mirrors/node/</code> 切换到淘宝的node镜像</li>
<li><code>nvm npm_mirror https://npm.taobao.org/mirrors/npm/</code> 切换到淘宝的npm镜像<br>
这之后就顺畅多了，基本一路安装，我安装了4.4.4和6.10.1两个版本</li>
</ul>
<h3>补回失去的全局模块</h3>
<p>对照第二步中的截图，一般情况下，在国内全局安装的第一个包都是cnpm，所以直接<code>npm install cnpm -g</code>即可，接下来就是对照自己的项目需要，全局安装各种包即可，不过要记住每个版本都需要安装一遍，别嫌烦，切换就用use命令就行，然后cnpm各种包就好了。</p>
<p><em>到这里就基本结束了，后面发现bug，则此博文未完待续···</em></p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[学习科学上网]]></title>
      <url>http://geekarl.com/2017/03/23/ShadowSocks-Learning/</url>
      <content type="html"><![CDATA[<!-- excerpt -->
<p><em>不过这个并非对非程序出身的人的教程，详细学习可以参考最后的《SS不完全指南》一文</em></p>
<blockquote>
<p>今天经过一番探索，对shadowsocks的使用方式有了一定理解，虽然没到用代码控制那一层，不过对于平时应用足矣<br>
核心是使用ShadowSocks来进行网络代理，但具体的服务器可以有某些<strong>分享网址</strong>上可用，寻找适合的服务器就好，大部分免费的额度已经够了，不过随着时间的发展，或许需要部分资金支持。</p>
</blockquote>
<h3>下载ShadowSocks软件</h3>
<p>现在这个软件的直接链接已经被屏蔽了，目前有两种方式：</p>
<ul>
<li>github地址<a href="https://github.com/shadowsocks/shadowsocks-windows" target="_blank" rel="external">shadowsocks-windows</a></li>
<li>客户端官网的下载地址<a href="http://www.sshchina.net/" target="_blank" rel="external">比较老的版本</a> 2.x版本</li>
<li>ishadow<a href="http://get.ishadow.website/" target="_blank" rel="external">下载地址</a> 3.x版本</li>
</ul>
<p>下载后一般解压即可用，新老版本都支持的方式是conf服务器配置文件的方法，这个方法在各个服务器提供处都有涉及。其他方法简单看看就能上手，不过conf文件方法对于程序员是最直观的。</p>
<h3>寻找Socks服务器源</h3>
<ul>
<li><a href="http://51.ruyo.net/shadowsocks/" target="_blank" rel="external">分享网址一</a>——不定期更新，不过不能用了可参考最后的不完全指南</li>
<li><a href="https://www.atgfw.org/" target="_blank" rel="external">分享网址二</a>——好像被屏蔽了，估计以后不能用</li>
</ul>
<p>此次探索暂时以https://www.atgfw.org/为例子，下载服务器配置文件，放到软件同一目录下，右下角小飞机会自动读入配置信息，而后就可以安心科学上网了。<br>
这个例子里面的VPN免费的流量还是不少，虽然整个交互真是作死，以后还是买一些指南里面说的付费稳定的才是上策，鉴于现在对国外流量需求不算大，先这么用着吧。</p>
<h3>原理探究</h3>
<p>由于是go语言写的，下面是一篇针对各级代理的原理性讲解：</p>
<ul>
<li><a href="http://51.ruyo.net/p/3564.html" target="_blank" rel="external">GO Simple Tunnel</a></li>
</ul>
<p>下一篇是针对shadowSocks的详细探究和服务购买推荐</p>
<ul>
<li><a href="http://www.auooo.com/2015/06/26/shadowsocks%EF%BC%88%E5%BD%B1%E6%A2%AD%EF%BC%89%E4%B8%8D%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97/#serverconfiguration" target="_blank" rel="external">ShadowSocks不完全指南</a></li>
</ul>
<p><em>在此声明，这个是个人笔记，不作为分享~</em></p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SHELL脚本的学习和制作]]></title>
      <url>http://geekarl.com/2017/03/20/bash-learning/</url>
      <content type="html"><![CDATA[<!-- excerpt -->
<h3>本地的PACK构建shell脚本</h3>
<p>首先是在在package.json中的scripts键值中加入release</p>
<p><code>&quot;release&quot;: &quot;sh build/pack.sh&quot;</code></p>
<p>之后在项目目录下新建build文件，并在其中新建pack.sh文件，内容如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="keyword">if</span> [ ! <span class="string">"<span class="variable">$1</span>"</span>]; <span class="keyword">then</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"不可缺少打包版本号"</span></div><div class="line">    <span class="built_in">exit</span> 1</div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="comment"># 上面的命令是确认传来了作为版本号的第一个参数</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"编译中....."</span></div><div class="line">npm run build</div><div class="line"><span class="comment"># "build": "cross-env NODE_ENV=production gulp",为gulp的命令</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"压缩打包中....."</span></div><div class="line">mkdir -p output</div><div class="line"><span class="comment"># -p指即便是有当前目录，建立也算成功</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$1</span>"</span> &gt; output/version.txt</div><div class="line">tar zcvf qmt.tgz dist/ index.html static/</div><div class="line">mv qmt.tgz <span class="variable">$1</span>.tgz</div><div class="line">mv <span class="variable">$1</span>.tgz output</div><div class="line"><span class="comment"># 打包两个文件夹的内容和index.html 并把打包后的文件移动到output中</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"打包完毕"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"提交、添加tag, 并push到gitlab"</span></div><div class="line">git add output/</div><div class="line">git add src/components/_global/footer/index.vue</div><div class="line"><span class="comment"># index.vue更改了下角标的版本号，需要重新添加保存</span></div><div class="line">git commit <span class="_">-a</span> -v -m <span class="string">'new release'</span></div><div class="line">git tag v<span class="string">"<span class="variable">$1</span>"</span></div><div class="line">git push -u origin release --tags</div><div class="line"><span class="comment"># 把新的tag推送到仓库</span></div></pre></td></tr></table></figure>
<p>这就是执行了npm run release后执行的一系列命令。</p>
<h2>使代码提交时能自动触发jenkins构建脚本</h2>
<p>先在jenkins中建立一个任务 点击左上角新建  建立一个新的project(本次是直接复制的别人已建立好的配置)，取名为test(推送到测试环境) 在打开的配置页面中有如下几点需要注意</p>
<ul>
<li>项目名称核对是否正确。</li>
<li>勾选参数化构建过程，将服务器的地址设置为变量，在脚本中可直接读到($TEST_SERVERS)</li>
<li>源码管理项，选择git，填写当前项目的git地址，Branch(refs/heads/release) Local subdirectory for repo下写跟后端约定的文件夹名称</li>
<li>构建触发器这里，选择Build when a change is push to GitLab 这里需要注意，要配置好项目的gitlab仓库的webhook，地址就是这个后面跟着的URL，同时下面的Target Branch选择release分支。</li>
<li>构建触发器选择后，一些触发选项根据需要来确定，然后到项目的gitlab页面，点击右上角的配置-webhook项，第一个对话框写入上面提到的URL，选择push和push tags两个一般就可以完成触发</li>
<li>在构建的commend对话框，写入触发脚本的shell命令如下, test.sh是接下来要写的shell脚本</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd $WORKSPACE/test</div><div class="line">sh build/test.sh</div></pre></td></tr></table></figure>
<h2>写test.sh脚本</h2>
<p>脚本的目标是基于jenkins所在的机器，运行此脚本，将打好的包传输到部署机器上，解压到所需的文件夹下，并把原压缩包删除。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$TEST_SERVERS</span></div><div class="line"><span class="comment"># 打开目标文件目录</span></div><div class="line"><span class="built_in">cd</span> <span class="variable">$WORKSPACE</span>/<span class="built_in">test</span></div><div class="line"><span class="comment"># 读取当前包的版本号</span></div><div class="line">VERSION=`cat ./output/version.txt`</div><div class="line"><span class="built_in">echo</span> <span class="string">"版本号: "</span><span class="variable">$VERSION</span></div><div class="line">scp output/qmt.tgz root@<span class="variable">$TEST_SERVERS</span>:/tmp &amp;&amp; \</div><div class="line"><span class="comment"># 通过scp命令把打好的output文件夹下的包传输到目标机器的tmp文件夹下</span></div><div class="line">ssh root@<span class="variable">$TEST_SERVERS</span> </div><div class="line"><span class="comment">#连接到目标机器上，默认是在root下 接下来要执行的命令需要放在双引号中！</span></div><div class="line"><span class="comment"># 先打开最顶层的目录，在最顶层的目录进行接下来的操作</span></div><div class="line"><span class="comment"># tar命令的zxvf对应解压 -C可指定解压到的文件夹 rm为删除命令</span></div><div class="line"><span class="string">"cd ../ &amp;&amp; tar zxvf ./tmp/qmt.tgz -C ./tv/le/*-static &amp;&amp; \</span></div><div class="line">tar zxvf ./tmp/qmt.tgz -C ./tv/le/staging-*-static &amp;&amp; \</div><div class="line">rm -rf ./tmp/qmt.tgz"</div></pre></td></tr></table></figure>
<h2>学习发布用的upload脚本</h2>
<p>upload脚本是将代码发布到两台机器上，因此$DEPLOY_SERVERS是一个两个IP地址用逗号分隔的字符串，先分隔为数组，而后进行循环部署处理。还有一点是通过读入的版本号来建立对应版本的文件夹，而后用软连接来指向，方便出问题后回滚版本。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$DEPLOY_SERVERS</span></div><div class="line">VERSION=`cat ../output/version.txt`</div><div class="line"><span class="built_in">echo</span> <span class="string">"版本号: "</span><span class="variable">$VERSION</span></div><div class="line"><span class="built_in">cd</span> <span class="variable">$WORKSPACE</span>/lesports-fe-cms</div><div class="line"><span class="comment"># 下面这个是讲$DEPLOY_SERVERS用','分隔为数组并存入ADDR</span></div><div class="line">IFS=<span class="string">','</span> <span class="built_in">read</span> -ra ADDR &lt;&lt;&lt; <span class="string">"<span class="variable">$DEPLOY_SERVERS</span>"</span></div><div class="line"><span class="comment"># 循环数组读取每一个变量</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">"<span class="variable">$&#123;ADDR[@]&#125;</span>"</span>; <span class="keyword">do</span></div><div class="line">    <span class="comment"># 先通过scp把包上传到要部署的机器上</span></div><div class="line">    scp output/qmt.tgz root@<span class="variable">$i</span>:/tmp</div><div class="line">    ssh root@<span class="variable">$i</span> <span class="string">"mkdir -p /letv/leapps/tags &amp;&amp; \</span></div><div class="line">    cd /letv/leapps/tags &amp;&amp; \</div><div class="line">    mkdir -p qmt.<span class="variable">$VERSION</span> &amp;&amp; \</div><div class="line">    cd qmt.<span class="variable">$VERSION</span> &amp;&amp; \</div><div class="line">    tar zxvf /tmp/qmt.tgz -C . &amp;&amp; \</div><div class="line">    rm -f /tmp/qmt.tgz &amp;&amp; \</div><div class="line">    ls -rthl &amp;&amp; \</div><div class="line">    cd ../../ &amp;&amp; \</div><div class="line">    rm -fr qmt-cms-static &amp;&amp; \</div><div class="line">    ln -s tags/qmt.<span class="variable">$VERSION</span> qmt-cms-static</div><div class="line">    "</div><div class="line"><span class="keyword">done</span></div><div class="line"><span class="comment"># mkdir -p qmt.$VERSION 为建立带版本号的文件夹(在tags文件夹下)</span></div><div class="line"><span class="comment"># cd进入带版本号的文件夹,把包解压到当前文件夹下</span></div><div class="line"><span class="comment"># ls -rthl 为显示目录内容列表</span></div><div class="line"><span class="comment"># 回退到 /letv/leapps文件夹中 此处已有qmt-cms-static这个文件夹，ln -s tags/qmt.$VERSION qmt-cms-static 就是把这个文件夹软连接到最新的带tag的文件夹上。</span></div></pre></td></tr></table></figure>
<h2>优化脚本-取消版本号并增加错误提示</h2>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="keyword">if</span> [ ! <span class="string">"<span class="variable">$1</span>"</span> ]; <span class="keyword">then</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"版本号是必须的"</span></div><div class="line">    <span class="built_in">exit</span> 1</div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="comment"># 用于当本地的tag已存在时的提示信息</span></div><div class="line">curTag=`git tag | grep v<span class="variable">$1</span>`</div><div class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$curTag</span>"</span> == <span class="string">"v<span class="variable">$1</span>"</span> ]; <span class="keyword">then</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"版本号已存在"</span></div><div class="line">    <span class="built_in">exit</span> 1</div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"DIST编译中....."</span></div><div class="line">npm run dist</div><div class="line"><span class="comment">#</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"压缩打包中......"</span></div><div class="line">mkdir -p output</div><div class="line">tar zcvf qmt.tgz dist/ index.html static/</div><div class="line">mv qmt.tgz output</div><div class="line"><span class="built_in">echo</span> <span class="string">"打包完毕"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"提交、添加tag，并push到gitlab"</span></div><div class="line">git add output/</div><div class="line">git add src/components/_global/footer/index.vue</div><div class="line">git commit <span class="_">-a</span> -v -m <span class="string">"new release v<span class="variable">$1</span>"</span></div><div class="line">git tag <span class="_">-a</span> v<span class="string">"<span class="variable">$1</span>"</span></div><div class="line"><span class="comment"># 捕捉错误并提示出错信息</span></div><div class="line">git push -u origin release || &#123; <span class="built_in">echo</span> <span class="string">"本地推送失败，请pull后再执行"</span>; <span class="built_in">exit</span> 1; &#125;</div><div class="line">git push origin v<span class="string">"<span class="variable">$1</span>"</span> || &#123; <span class="built_in">echo</span> <span class="string">"tag push failed"</span>; <span class="built_in">exit</span> 1; &#125;</div></pre></td></tr></table></figure>
<p><em>这些shell脚本的难度都不是很大，主要是练习，毕竟也不是专业的运维，否则最起码也要有定时执行一类的，不过工作需要的运维东西不算多，慢慢积累吧。</em></p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用SSR来模拟后端mock数据]]></title>
      <url>http://geekarl.com/2017/03/11/ssr-introduction/</url>
      <content type="html"><![CDATA[<!-- excerpt -->
<h3>特点</h3>
<ul>
<li>可强制跨域访问（ajax不报错，方便调试）</li>
<li>可启动多个服务，端口冲突可自动顺延</li>
<li>可设定指定端口号</li>
</ul>
<h3>使用方法</h3>
<p><em>全局安装:</em><br>
<code>npm install -g ssr</code></p>
<p><em>命令示例:</em><br>
<code>$ssr 默认端口为1987 访问地址为=&gt; http://localhost:1987</code><br>
<code>$ssr -p 2016 端口设置为2016 访问地址为=&gt; http://localhost:2016</code><br>
<code>$ssr -cp 2017 端口设置为2017 设置为可跨域访问</code></p>
<p><em>在项目中的使用指南</em></p>
<ol>
<li>建立一个用于mock数据的文件夹mock1  <code>touch mock1</code></li>
<li>在mock1中放入mock数据的file文件，内容是json数据  <code>cd mock1 &amp;&amp; touch file.json</code></li>
<li>在mock1中用vscode打开json文件，并粘入mock数据  <code>code file.json</code></li>
<li>在mock1文件夹中启动ssr  <code>ssr -cp 2017</code></li>
<li>在项目中就可以使用ajax对file中的内容进行请求(前提是项目也是运行在一个本地服务器上)</li>
</ol>
<p><em>ajax请求示例代码</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;title&gt;测试ssr的性能&lt;/title&gt;</div><div class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</div><div class="line">        &lt;script src=&quot;http://apps.bdimg.com/libs/jquery/2.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">    &lt;script&gt;</div><div class="line">        $.ajax(&#123;</div><div class="line">            type: &apos;POST&apos;,</div><div class="line">            datyType: &apos;json&apos;,</div><div class="line">            data: &#123; &apos;name&apos;: &apos;karl&apos;, &apos;old&apos;: 10 &#125;,</div><div class="line">            url: &apos;http://127.0.0.1:2017/file.json&apos;,</div><div class="line">            success: function(data) &#123;</div><div class="line">                console.log(&apos;success:&apos;, data);</div><div class="line">            &#125;,</div><div class="line">            error: function(error) &#123;</div><div class="line">                console.log(&apos;error&apos;, error);</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3>加上逻辑的MOCK数据</h3>
<p>新建一个proxy.config.js<br>
此文件内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">    &apos;GET /users&apos;: &#123;&#123;name: &apos;kenny wang&apos;&#125;, &#123;name: &apos;karl&#125;&#125;,  // 对应请求是http://localhost:2017/users method=&apos;GET&apos;</div><div class="line">    &apos;GET /user1&apos;: &#123;name: &apos;karl api&apos;&#125;,</div><div class="line">    &apos;POST /users&apos;: &#123;name: &apos;???text&apos;&#125;,</div><div class="line">    &apos;POST /users/2: &quot;22222223&quot;,</div><div class="line">    &apos;POST /users&apos;: function(data,url) &#123;</div><div class="line">        // data 为接受传递来的数据</div><div class="line">        // url 请求的地址</div><div class="line">        // 需接受的参数  - form-data   - x-www-form-urlencoded  - raw</div><div class="line">        if (data.name === &apos;jslite&apos;) &#123;</div><div class="line">            return &#123;name: &apos;kkkarl&apos;&#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            return &#123;name: &apos;yyy&apos;&#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>此文件的使用方法：</p>
<p><code>$ ssr --proxy proxy.config.js -cp 2017</code></p>
<p>这样只要约定好数据格式, 后端端口不会影响前端调试, Mock Server 可以相应请求</p>
<blockquote>
<p>PS: 前提是开发页面的web环境必须是有服务器的~否则没法跨域发送ajax的。</p>
</blockquote>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[回首——爱乐之城]]></title>
      <url>http://geekarl.com/2017/02/18/comment-about-LALALAND/</url>
      <content type="html"><![CDATA[<!-- excerpt -->
<p><strong>文艺类的电影看的不多，不过这一部不愧是经典，最重要的就是每个人都在其中能找到自己的视角。</strong> <strong>——by卡少</strong></p>
<p><img src="http://image13.m1905.cn/uploadfile/2016/0714/20160714103140105045.jpg" alt="Banner"></p>
<p>首先是夸张的开场舞，让我有一种看文艺表演的感觉，不得不说上来这么high的表演，歌词中却透漏出了之后的剧情，不过据说这是对另外一部电影的致敬，无论如何，这开场白确实铺垫的不错，得以跟随导演顺畅浸入剧情。</p>
<p>接下来就是寻常爱情片的套路，偶遇——缘起——相守——缘灭，单这个影片不是走的爱情片的路线，最重要的还是其中歌舞的穿插，台词即歌词，情感表现更充分，也更容易调动起观众的情绪，不得不说是大家手笔。其中主线还按照季节来分段，也更预示了感情线的发展。</p>
<p>最关键的是最后直接镜头切换5年后，对两人给出了答案，但无巧不成电影，两者再度以尘埃落定的身份相遇，而后音乐的伏笔展现，最大的泪点就是在主体钢琴曲中给出了两个人的另一种可能性，说明追求梦想跟爱情其实并不矛盾，所有的拐点都有另一种可能~</p>
<p>不过我在看到最后的幸福伏笔剪辑之后，男女主的对视让我感到了释然，觉得其实这样也够了，真是曾经拥有，已经很幸福了，这……感觉不是悲剧啊，毕竟电影最后给出了另一种可能性，与电影中的现实对比。但另一方面想，我们也不用拘泥于导演展示的真实和可能，毕竟两种路都给出来了，大家自行对号入座，爱圆满结局的就当最后主体音乐中的剪辑是结局好了，都是电影，何必拘泥于导演的思路呢。但现实是没有假设的，比起电影，现实残酷的多，或许没有再次偶遇的缘分，也或许不能回忆起那首钢琴曲……</p>
<p><img src="http://upload.art.ifeng.com/2016/0902/1472786566364.jpg" alt="content"></p>
<p>我的触动点可能比较low一点，在我看到男主为了帮女主实现梦想，在山顶上对女主规划好之后的路，并坦然接受一切，安排一切时，我觉得这部影片已经触动了我的心灵。其实爱情的最终意义就是帮每个人找到自己，发现自己，影片贴切地用追求梦想来代指人们发现自己的历程。而遇到真实的自己之后，接下来的一切其实都可以接受了，说到底发现自己是一个孤独的历程，如果可能，希望爱情加以指点，在此之后，人们便可以坦然面对一切，珍惜当下，亦感谢过往。</p>
<p>所以我为男女主角帮助彼此去发现梦想的过程而感动，毕竟只有找到自我，才能更好地收获幸福。影片的最后剪辑也贴合我的思考，其实发现自我跟感情发展并不是有必然的冲突，在现实中也一样，几个拐点就是人生的另一种可能。因此我看完影片并没有落泪，因为影片讲述的幸福，就在我身边，它提醒我的珍惜，我早已通过另一种方式领悟。</p>
<p>半缘修道半缘君，多亏温柔漂亮的女票陪伴我看这部文艺电影，这才是我能想到这么多的源泉，还好有她，我才更进一步地理解自己，理解幸福的内涵。否则，我真的会怀疑影片结尾表述的幸福，是不是只是电影中的镜花水月，而她让我明白这是真实世界在文艺作品中的写照。在此也祝愿每个人都在遇见自我的路上，珍惜彼此的缘分，愿有岁月可回首，且以深情共白头。</p>
<p><img src="http://image13.m1905.cn/uploadfile/2016/0714/20160714103138770941.jpg" alt="footer"></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="298" height="52" src="//music.163.com/outchain/player?type=1&id=34751628&auto=1&height=32"></iframe>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[情人节专题~你的谜底，我来揭开]]></title>
      <url>http://geekarl.com/2017/02/14/For-My-Lover/</url>
      <content type="html"><![CDATA[<!-- excerpt -->
<style type="text/css">
.show-heart{
    background-color: rgba(235, 159, 171, 0.4);
}
.show-heart .sign {
    text-align: right;
    font-weight: bold;
    width: 65%;
    float: left;
    padding-left:2%;
}
.show-heart .text{
    display: inline-block;
    text-indent:32px;
    font-size: 1.1em;
    width: 65%;
    float: left;
    padding-left:2%;
}
.show-heart .img-right{
    display: inline-block;
    float: right;
    width: 25%;
    margin: 0;
}
.show-heart::after{
    display: table;
    content: '';
    clear: both;
}
</style>
<blockquote>
<p>Hi~ 艳丽，这是专门写给你的……不要紧张🌹<br>
相遇：2017年的1月，我们都迈出了勇敢的一步，The very first~ ❤️<br>
相识：简单的相遇，却似乎已经相识了很久似的，信任感让我拥有了勇气和担当，不再害怕 💞<br>
承诺：我愿意为你而改变为更好的自己，我会倍加珍惜缘分，未来为你分忧，与你一起经历美好，相信爱情的力量 💘</p>
</blockquote>
<p><img src="http://i1.piimg.com/567571/318ce6a99eb3a5ae.jpg" alt="Banner"></p>
<p><strong>情人节前的告白</strong></p>
<div class="show-heart">
<p class="text">艳丽，其实遇见你之前，很长一段时间来我都不曾相信缘分，感觉自己的孤独也已经不可救药，而后漂亮知性的你出现在我的面前! (背负着救赎的使命~)</p>
<p class="img-right">
    <img src="http://p1.bpimg.com/567571/3fc501e76bb4fdb1.gif">
</p>
<p class="text">怎么说呢，如梦幻一般吧。我一直相信知乎上的一句话————爱情是从遇见自己开始的，如果我已经遇见了我自己，那爱情就会如约而至。我开始在心中守护你，不时地想起，做其他事情也有了更多的动力，周围的一切都似乎在告诉我，把握好这个女孩子，她身上有你正在追寻的幸福。</p>
<p class="img-right">
    <img src="http://p1.bpimg.com/567571/3fc501e76bb4fdb1.gif">
</p>
<p class="text">就像昨天电影开场前的那个戒指广告一样，每个男生心里都有个长不大的小孩子，也许会怕这怕那，直到一个人，能让他愿意改变，艳丽，请问愿意做改变我的那个人吗~ 可以的话，请你做我女朋友吧，我也会一如既往地努力，希望以后我们能更坦诚，更好地理解彼此哦。</p>
<p class="sign"><span>———</span>By 王利兴</p>
</div>
<p><img src="http://i1.piimg.com/567571/b18a81ccd80d4ef2.jpg" alt=""></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="298" height="52" src="//music.163.com/outchain/player?type=2&id=287035&auto=1&height=32"></iframe>
<p><strong>亲爱的，我收到了你的回复 好感动，谢谢你的礼物</strong><br>
<strong>从此以后，我的奋斗更增加一份动力了，加油ing</strong></p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[样式代码编写习惯约定——高逼格]]></title>
      <url>http://geekarl.com/2017/02/12/CSS-Good-Technique/</url>
      <content type="html"><![CDATA[<!-- excerpt -->
<h2>CSS代码规范</h2>
<p><strong>写在最前面的一句话：sass不要嵌套过深，不允许超过3层</strong></p>
<h3><strong>命名规范</strong></h3>
<p><strong>RULE1.  命名</strong>全部<strong>小写</strong>，不允许出现大写或者驼峰命名，使用<strong>短中划线</strong>，不允许出现下划线命名</p>
<p><strong>bad</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.someSelector &#123;</div><div class="line">  margin: 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.some_selector &#123;</div><div class="line">  margin: 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>good</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.some-selector &#123;</div><div class="line">  margin: 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>RULE2</strong>. 尽量使用<strong>有意义的</strong>命名，<strong>不允许</strong>出现1,2,3,4的后缀区分，尽量避免使用拼音，除非耳熟能详的，比如分享的weixin，weibo这种的一看就知道意义的</p>
<p><strong>bad</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.selector1 &#123;</div><div class="line">  margin: 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.biaoti &#123;</div><div class="line">  font-size: 18px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>good</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.title &#123;</div><div class="line">  font-size: 18px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>RULE3</strong>. 引入<code>JavaScript</code>钩子，<code>.js-*</code> classes 来表示行为(相对于样式)，但是不要在 CSS 中定义这些 classes。大家要习惯于使用</p>
<p><strong>bad</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`&lt;div class=&quot;`selector`&quot;&gt;&lt;/div&gt;`</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`$(&apos;`.selector`&apos;).height();`</div></pre></td></tr></table></figure>
<p><strong>good</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div class=“selector js-selector&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(&apos;.js-selector&apos;).height();</div></pre></td></tr></table></figure>
<h3><strong>选择器</strong></h3>
<p><strong>RULE4</strong>. 在一个widget里面最多使用一个声明widget意义的id，其他不得滥用id提高选择器的权重</p>
<p><strong>bad</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;section&quot;&gt;</div><div class="line">  &lt;div id=“header&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p><strong>good</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;section&quot;&gt;</div><div class="line">  &lt;div&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p><strong>RULE5</strong>. 如无必要，不得为** <strong><code>id</code>、<code>class</code></strong> **选择器添加类型选择器进行限定。 比如div#id，p.class之类</p>
<p><strong>bad</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">div#header &#123;</div><div class="line">  font-size: 20px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>good</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#header &#123;</div><div class="line">  font-size: 20px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>RULE6.</strong> 多选择器规则之间必须换行</p>
<p><strong>bad</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">`.element, p &#123;</div><div class="line">  margin: 10px 0 @variable*2 10px;</div><div class="line">  `font-size: 12px;`</div><div class="line">&#125;`</div></pre></td></tr></table></figure>
<p><strong>good</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">`.element,</div><div class="line">p &#123;</div><div class="line">  margin: 10px 0 @variable*2 10px;</div><div class="line">  `font-size: 12px;`</div><div class="line">&#125;`</div></pre></td></tr></table></figure>
<h3><strong>编码书写规范</strong></h3>
<p><strong>RULE7.</strong> sass使用四个空格</p>
<p><strong>bad</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.element &#123;</div><div class="line">    margin: 10px 0 @variable*2 10px;</div><div class="line">    `font-size: 12px;`</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>good</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.element &#123;</div><div class="line">  margin: 10px 0 @variable*2 10px;</div><div class="line">  `font-size: 12px;`</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>RULE8.</strong> 属性定义必须另起一行</p>
<p><strong>bad</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.element &#123;</div><div class="line">  margin: 10px 0 @variable*2 10px;`font-size: 12px;`</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>good</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.element &#123;</div><div class="line">  margin: 10px 0 @variable*2 10px;</div><div class="line">  `font-size: 12px;`</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>RULE9.</strong> 每个属性后面必须加 ‘;’</p>
<p><strong>bad</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.element &#123;</div><div class="line">  margin: 10px 0 @variable*2 10px</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>good</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.element &#123;</div><div class="line">  margin: 10px 0 @variable*2 10px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>RULE10</strong>. 文本使用双引号</p>
<p><strong>bad</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.element:after &#123;</div><div class="line">  `content: &apos;.&apos;`;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>good</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.element:after &#123;</div><div class="line">  `content: &quot;.&quot;`;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>RULE11</strong>. sass变量的计算用括号，便于阅读</p>
<p><strong>bad</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.element &#123;</div><div class="line">  margin: 10px 0 @variable*2 10px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>good</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.element &#123;</div><div class="line">  margin: 10px 0 (@variable * 2) 10px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>RULE12</strong>. 选择器与 <code>{</code>之前<code>必须</code>要有空格</p>
<p><strong>bad</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.element&#123;</div><div class="line">  margin: 10px 0 (@variable * 2) 10px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>good</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.element &#123;</div><div class="line">  margin: 10px 0 (@variable * 2) 10px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>RULE13</strong>. 属性名的<code>:</code>后必须要有空格, 属性名的<code>:</code>前禁止加空格</p>
<p><strong>bad</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.element &#123;</div><div class="line">  margin : 10px 0 (@variable * 2) 10px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>good</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.element &#123;</div><div class="line">  margin: 10px 0 (@variable * 2) 10px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>RULE14</strong>. 数值单位的属性值，如值为零，则不得带单位。如不能有 0px的书写出现</p>
<p><strong>bad</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.element &#123;</div><div class="line">  margin: 10px 0px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>good</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.element &#123;</div><div class="line">  margin: 10px 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>RULE15</strong>. 在可以使用缩写的情况下，尽量使用属性缩写（建议）</p>
<p><strong>bad</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.element &#123;</div><div class="line">  margin-top: 10px;</div><div class="line">  margin-right: 5px;</div><div class="line">  margin-bottom: 2px;</div><div class="line">  margin-left: 0</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>good</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.element &#123;</div><div class="line">  margin: 10px 5px 2px 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>RULE16</strong>. 当数值为 0 - 1 之间的小数时，省略整数部分的** **<code>0</code></p>
<p><strong>bad</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.element &#123;</div><div class="line">  margin: 0.1rem;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>good</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.element &#123;</div><div class="line">  margin: .1rem;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>RULE17</strong>. <code>url()</code>** **函数中的路径不加引号</p>
<p><strong>bad</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.element &#123;</div><div class="line">  background: url(&quot;test.png&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>good</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.element &#123;</div><div class="line">  background: url(test.png);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>RULE18</strong>. 在自适应的布局上，小图片要用px单位并且后面必须添加?__sprite的标记</p>
<p><strong>bad</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.element &#123;</div><div class="line">  background: url(test.png);</div><div class="line">  width: 2em;</div><div class="line">  height: 2em;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>good</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.element &#123;</div><div class="line">  background: url(test.png?__sprite);</div><div class="line">  width: 32px;</div><div class="line">  height: 32px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>**RULE19. <strong><code>自适应布局Media Query</code></strong> **不得单独编排，必须与相关的规则一起定义。</p>
<p><strong>bad</strong></p>
<p><strong>good</strong></p>
<p><strong>RULE20</strong>. 需要使用hack的地方先想想自己哪地方做的不好，是否真的需要hack，目前浏览器需要用到hack的地方着实不多</p>
<p><strong>RULE21</strong>. 清除浮动不得添加空标签的方式进行，多使用伪类，或者去了解BFC的相关规则，基本上能覆盖开发中的全部情况</p>
<p><strong>bad</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;selector&quot;&gt;</div><div class="line">  &lt;div class=&quot;clearfix&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.clearfix &#123;</div><div class="line">  clear: both;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>good</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;selector&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.selector &#123;</div><div class="line"> &amp;:after &#123;</div><div class="line">  display: table;</div><div class="line">  clear: both;</div><div class="line">  content: &quot;&quot;;</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>RULE22</strong>. 带私有前缀的属性由长到短排列，按冒号位置对齐</p>
<p><strong>bad</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-webkit-user-select: none;</div><div class="line">-moz-user-select: none;</div><div class="line">-ms-user-select: none;</div><div class="line">user-select: none;</div></pre></td></tr></table></figure>
<p><strong>good</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-webkit-user-select: none;</div><div class="line">   -moz-user-select: none;</div><div class="line">    -ms-user-select: none;</div><div class="line">        user-select: none;</div></pre></td></tr></table></figure>
<h4>rule23. 组件的样式中不使用id选择器</h4>
<p><strong>bad</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#news-list-wrap &#123;</div><div class="line">    color: #000;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>good</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 如果担心组件样式被覆盖，可在class后面加上 -xxx 以保证唯一性</div><div class="line">// 基本原则就是通过给class加后缀来表示特殊性</div><div class="line">.news-list-wrap-sth &#123;</div><div class="line">    color: #000;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3><strong>属性的书写顺序</strong></h3>
<ol>
<li>定位相关, 常见的有：display position left top float 等</li>
<li>盒模型相关, 常见的有：<code>width</code> <code>height</code> <code>margin</code> <code>padding</code> <code>border</code> 等</li>
<li>其他属性</li>
</ol>
<p>示例 ：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">.content &#123;</div><div class="line">  /* 定位 */</div><div class="line">  display: block;</div><div class="line">  position: absolute;</div><div class="line">  left: 0;</div><div class="line">  top: 0;</div><div class="line">  /* 盒模型 */</div><div class="line">  width: 50px;</div><div class="line">  height: 50px;</div><div class="line">  margin: 10px;</div><div class="line">  border: 1px solid black;</div><div class="line">  / *其他* /</div><div class="line">  color: #efefef;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>按照这样的顺序书写可见提升浏览器渲染dom的性能<br>
简单举个例子，网页中的图片，如果没有设置width和height，在图片载入之前，他所占的空间为0，但是当他加载完毕之后，那块为0的空间突然被撑开了，这样会导致，他下面的元素重新排列和渲染，造成重绘（repaint）和回流（reflow）。我们在写css的时候，把元素的定位放在前头，首先让浏览器知道该元素是在文本流内还是外，具体在页面的哪个部位，接着让浏览器知道他们的宽度和高度，border等这些占用空间的属性，其他的属性都是在这个固定的区域内渲染的，差不多就是这个意思吧~ （这个咱们遵守的最不好的，以后注意书写顺序，做一个有逼格的csser）</p>
<p>另外，大家多挖掘sass，发挥他的威力，别以为只是一个方便嵌套的玩意，for，each map等能带来很多书写的便利提升效率</p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[代码整洁之道——JS]]></title>
      <url>http://geekarl.com/2017/02/11/JS-nice-habit/</url>
      <content type="html"><![CDATA[<!-- excerpt -->
<blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="external">众成翻译</a><br>
译者：<a href="http://www.zcfy.cc/@jamesfancy" target="_blank" rel="external">边城</a><br>
链接：<a href="http://www.zcfy.cc/article/2273" target="_blank" rel="external">http://www.zcfy.cc/article/2273</a><br>
原文：<a href="https://github.com/ryanmcdermott/clean-code-javascript/blob/master/README.md" target="_blank" rel="external">https://github.com/ryanmcdermott/clean-code-javascript/blob/master/README.md</a></p>
</blockquote>
<h2><a href="#introduction"></a>概述</h2>
<p><a href="http://p0.qhimg.com/t01cb6a971284a41620.jpg" target="_blank" rel="external"><img src="http://p0.qhimg.com/t01cb6a971284a41620.jpg" alt="一张幽默的图片：软件质量通过你在阅读代码的时候有多少报怨来进行评估"></a></p>
<p>Robert C. Martin 在<br>
<a href="https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882" target="_blank" rel="external"><em>《代码整洁之道》</em></a> 中提到的软件工程原则，同样适用于 JavaScript。这不是一个风格参考。它指导如何用 JavaScript 编写可读、可复用、可重构的软件。</p>
<p>并不是每一个原则都必须严格遵循，甚至很少得到大家的认同。它们仅用于参考，不过要知道这些原则都是_《代码整洁之道》_的作者们累积多年的集体经验。</p>
<p>我们在软件工程方面的技术发展刚刚超过 50 年，我们仍然在学习很多东西。当软件架构和架构本身一样古老的时候，我们应该遵循更为严格规则。现在，对于你和你的团队编写的 JavaScript 代码，不妨依据这些准则来进行质量评估。</p>
<p>还有一件事：知道这些不会马上让你成为更好的软件开发者，在工作中常年使用这些准则不能让你避免错误。每一段代码都从最初的草图开始到最终成型，就像为湿粘土塑形一样。最后，当我们与同行一起审查的时候，再把不完美的地方消除掉。不要因为初稿需要改善而否定自己，需要要否定的只是那些代码！</p>
<h2><a href="#variables"></a><strong>变量</strong></h2>
<h3><a href="#use-meaningful-and-pronounceable-variable-names"></a>使用有准确意义的变量名</h3>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var yyyymmdstr = moment().format(&apos;YYYY/MM/DD&apos;);</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var yearMonthDay = moment().format(&apos;YYYY/MM/DD&apos;);</div></pre></td></tr></table></figure>
<h3><a href="#use-es6-constants-when-variable-values-do-not-change"></a>在变量的值不会改变时使用 ES6 的常量</h3>
<p>在不好的示例中，变量可以被改变。如果你申明一个常量，它会在整个程序中始终保持不变。</p>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var FIRST_US_PRESIDENT = &quot;George Washington&quot;;</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const FIRST_US_PRESIDENT = &quot;George Washington&quot;;</div></pre></td></tr></table></figure>
<h3><a href="#use-the-same-vocabulary-for-the-same-type-of-variable"></a>对同一类型的变量使用相同的词汇</h3>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">getUserInfo();</div><div class="line">getClientData();</div><div class="line">getCustomerRecord();</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getUser();</div></pre></td></tr></table></figure>
<h3><a href="#use-searchable-names"></a>使用可检索的名称</h3>
<p>我们阅读的代码永远比写的折。写可读性强、易于检索的的代码非常重要。在程序中使用_无_明确意义的变量名会难以理解，对读者造成伤害。所以，把名称定义成可检索的。</p>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 见鬼，525600 是个啥？</div><div class="line">for (var i = 0; i &lt; 525600; i++) &#123;</div><div class="line">  runCronJob();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 用 `var` 申明为大写的全局变量</div><div class="line">var MINUTES_IN_A_YEAR = 525600;</div><div class="line">for (var i = 0; i &lt; MINUTES_IN_A_YEAR; i++) &#123;</div><div class="line">  runCronJob();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3><a href="#use-explanatory-variables"></a>使用解释性的变量</h3>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const cityStateRegex = /^(.+)[,\\s]+(.+?)\s*(\d&#123;5&#125;)?$/;</div><div class="line">saveCityState(cityStateRegex.match(cityStateRegex)[1], cityStateRegex.match(cityStateRegex)[2]);</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const cityStateRegex = /^(.+)[,\\s]+(.+?)\s*(\d&#123;5&#125;)?$/;</div><div class="line">const match = cityStateRegex.match(cityStateRegex)</div><div class="line">const city = match[1];</div><div class="line">const state = match[2];</div><div class="line">saveCityState(city, state);</div></pre></td></tr></table></figure>
<h3><a href="#avoid-mental-mapping"></a>避免暗示</h3>
<p>显式优于隐式。</p>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var locations = [&apos;Austin&apos;, &apos;New York&apos;, &apos;San Francisco&apos;];</div><div class="line">locations.forEach((l) =&gt; &#123;</div><div class="line">  doStuff();</div><div class="line">  doSomeOtherStuff();</div><div class="line">  ...</div><div class="line">  ...</div><div class="line">  ...</div><div class="line">  // 等等，`l` 又是什么？</div><div class="line">  dispatch(l);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var locations = [&apos;Austin&apos;, &apos;New York&apos;, &apos;San Francisco&apos;];</div><div class="line">locations.forEach((location) =&gt; &#123;</div><div class="line">  doStuff();</div><div class="line">  doSomeOtherStuff();</div><div class="line">  ...</div><div class="line">  ...</div><div class="line">  ...</div><div class="line">  dispatch(location);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3><a href="#dont-add-unneeded-context"></a>不要添加没必要的上下文</h3>
<p>如果你的类名称/对象名称已经说明了它们是什么，不要在(属性)变量名里重复。</p>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var Car = &#123;</div><div class="line">  carMake: &apos;Honda&apos;,</div><div class="line">  carModel: &apos;Accord&apos;,</div><div class="line">  carColor: &apos;Blue&apos;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">function paintCar(car) &#123;</div><div class="line">  car.carColor = &apos;Red&apos;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var Car = &#123;</div><div class="line">  make: &apos;Honda&apos;,</div><div class="line">  model: &apos;Accord&apos;,</div><div class="line">  color: &apos;Blue&apos;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">function paintCar(car) &#123;</div><div class="line">  car.color = &apos;Red&apos;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3><a href="#short-circuiting-is-cleaner-than-conditionals"></a>短路语法比条件语句更清晰</h3>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function createMicrobrewery(name) &#123;</div><div class="line">  var breweryName;</div><div class="line">  if (name) &#123;</div><div class="line">    breweryName = name;</div><div class="line">  &#125; else &#123;</div><div class="line">    breweryName = &apos;Hipster Brew Co.&apos;;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function createMicrobrewery(name) &#123;</div><div class="line">  var breweryName = name || &apos;Hipster Brew Co.&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2><a href="#functions"></a><strong>函数</strong></h2>
<h3><a href="#function-arguments-2-or-less-ideally"></a>函数参数 (理论上少于等于2个)</h3>
<p>限制函数参数的数量极为重要，它会让你更容易测试函数。超过3个参数会导致组合膨胀，以致于你必须根据不同的参数对大量不同的情况进行测试。</p>
<p>理想情况下是没有参数。有一个或者两个参数也还好，三个就应该避免了。多于那个数量就应该考虑合并。通常情况下，如果你有多于2个参数，你的函数会尝试做太多事情。如果不是这样，大多数时候可以使用一个高阶对象作为参数使用。</p>
<p>既然 JavaScript 允许我们在运行时随意创建对象，而不需要预先定义样板，那么你在需要很多参数的时候就可以使用一个对象来处理。</p>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function createMenu(title, body, buttonText, cancellable) &#123;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var menuConfig = &#123;</div><div class="line">  title: &apos;Foo&apos;,</div><div class="line">  body: &apos;Bar&apos;,</div><div class="line">  buttonText: &apos;Baz&apos;,</div><div class="line">  cancellable: true</div><div class="line">&#125;</div><div class="line"></div><div class="line">function createMenu(menuConfig) &#123;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3><a href="#functions-should-do-one-thing"></a>一个函数只做一件事</h3>
<p>目前这是软件工程中最重要的原则。如果函数做了较多的事情，它就难以组合、测试和推测。当你让函数只做一件事情的时候，它们就很容易重构，而且代码读起来也会清晰得多。你只需要遵循本指南的这一条，就能领先于其他很多开发者。</p>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function emailClients(clients) &#123;</div><div class="line">  clients.forEach(client =&gt; &#123;</div><div class="line">    let clientRecord = database.lookup(client);</div><div class="line">    if (clientRecord.isActive()) &#123;</div><div class="line">      email(client);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">function emailClients(clients) &#123;</div><div class="line">  clients.forEach(client =&gt; &#123;</div><div class="line">    emailClientIfNeeded(client);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">function emailClientIfNeeded(client) &#123;</div><div class="line">  if (isClientActive(client)) &#123;</div><div class="line">    email(client);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function isClientActive(client) &#123;</div><div class="line">  let clientRecord = database.lookup(client);</div><div class="line">  return clientRecord.isActive();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3><a href="#function-names-should-say-what-they-do"></a>函数名称要说明它做的事</h3>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function dateAdd(date, month) &#123;</div><div class="line">  // ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">let date = new Date();</div><div class="line"></div><div class="line">// 很难从函数名了解到加了什么</div><div class="line">dateAdd(date, 1);</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function dateAddMonth(date, month) &#123;</div><div class="line">  // ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">let date = new Date();</div><div class="line">dateAddMonth(date, 1);</div></pre></td></tr></table></figure>
<h3><a href="#functions-should-only-be-one-level-of-abstraction"></a>函数应该只抽象一个层次</h3>
<p>如果你有多个层次的抽象，那么你的函数通常做了太多事情，此时应该拆分函数使其易于复用和易于测试。</p>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">function parseBetterJSAlternative(code) &#123;</div><div class="line">  let REGEXES = [</div><div class="line">    // ...</div><div class="line">  ];</div><div class="line"></div><div class="line">  let statements = code.split(&apos; &apos;);</div><div class="line">  let tokens;</div><div class="line">  REGEXES.forEach((REGEX) =&gt; &#123;</div><div class="line">    statements.forEach((statement) =&gt; &#123;</div><div class="line">      // ...</div><div class="line">    &#125;)</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  let ast;</div><div class="line">  tokens.forEach((token) =&gt; &#123;</div><div class="line">    // lex...</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  ast.forEach((node) =&gt; &#123;</div><div class="line">    // parse...</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">function tokenize(code) &#123;</div><div class="line">  let REGEXES = [</div><div class="line">    // ...</div><div class="line">  ];</div><div class="line"></div><div class="line">  let statements = code.split(&apos; &apos;);</div><div class="line">  let tokens;</div><div class="line">  REGEXES.forEach((REGEX) =&gt; &#123;</div><div class="line">    statements.forEach((statement) =&gt; &#123;</div><div class="line">      // ...</div><div class="line">    &#125;)</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  return tokens;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function lexer(tokens) &#123;</div><div class="line">  let ast;</div><div class="line">  tokens.forEach((token) =&gt; &#123;</div><div class="line">    // lex...</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  return ast;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function parseBetterJSAlternative(code) &#123;</div><div class="line">  let tokens = tokenize(code);</div><div class="line">  let ast = lexer(tokens);</div><div class="line">  ast.forEach((node) =&gt; &#123;</div><div class="line">    // parse...</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3><a href="#remove-duplicate-code"></a>删除重复代码</h3>
<p>任何情况下，都不要有重复的代码。没有任何原因，它很可能是阻碍你成为专业开发者的最糟糕的一件事。重复代码意味着你要修改某些逻辑的时候要修改不止一个地方的代码。JavaScript 是弱类型语句，所以它很容易写通用性强的函数。记得利用这一点！</p>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">function showDeveloperList(developers) &#123;</div><div class="line">  developers.forEach(developers =&gt; &#123;</div><div class="line">    var expectedSalary = developer.calculateExpectedSalary();</div><div class="line">    var experience = developer.getExperience();</div><div class="line">    var githubLink = developer.getGithubLink();</div><div class="line">    var data = &#123;</div><div class="line">      expectedSalary: expectedSalary,</div><div class="line">      experience: experience,</div><div class="line">      githubLink: githubLink</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    render(data);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">function showManagerList(managers) &#123;</div><div class="line">  managers.forEach(manager =&gt; &#123;</div><div class="line">    var expectedSalary = manager.calculateExpectedSalary();</div><div class="line">    var experience = manager.getExperience();</div><div class="line">    var portfolio = manager.getMBAProjects();</div><div class="line">    var data = &#123;</div><div class="line">      expectedSalary: expectedSalary,</div><div class="line">      experience: experience,</div><div class="line">      portfolio: portfolio</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    render(data);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">function showList(employees) &#123;</div><div class="line">  employees.forEach(employee =&gt; &#123;</div><div class="line">    var expectedSalary = employee.calculateExpectedSalary();</div><div class="line">    var experience = employee.getExperience();</div><div class="line">    var portfolio;</div><div class="line"></div><div class="line">    if (employee.type === &apos;manager&apos;) &#123;</div><div class="line">      portfolio = employee.getMBAProjects();</div><div class="line">    &#125; else &#123;</div><div class="line">      portfolio = employee.getGithubLink();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    var data = &#123;</div><div class="line">      expectedSalary: expectedSalary,</div><div class="line">      experience: experience,</div><div class="line">      portfolio: portfolio</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    render(data);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3><a href="#use-default-arguments-instead-of-short-circuiting"></a>使用默认参数代替短路表达式</h3>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function writeForumComment(subject, body) &#123;</div><div class="line">  subject = subject || &apos;No Subject&apos;;</div><div class="line">  body = body || &apos;No text&apos;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function writeForumComment(subject = &apos;No subject&apos;, body = &apos;No text&apos;) &#123;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3><a href="#set-default-objects-with-objectassign"></a>用 Object.assign 设置默认对象</h3>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">var menuConfig = &#123;</div><div class="line">  title: null,</div><div class="line">  body: &apos;Bar&apos;,</div><div class="line">  buttonText: null,</div><div class="line">  cancellable: true</div><div class="line">&#125;</div><div class="line"></div><div class="line">function createMenu(config) &#123;</div><div class="line">  config.title = config.title || &apos;Foo&apos;</div><div class="line">  config.body = config.body || &apos;Bar&apos;</div><div class="line">  config.buttonText = config.buttonText || &apos;Baz&apos;</div><div class="line">  config.cancellable = config.cancellable === undefined ? config.cancellable : true;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">createMenu(menuConfig);</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">var menuConfig = &#123;</div><div class="line">  title: &apos;Order&apos;,</div><div class="line">  // User did not include &apos;body&apos; key</div><div class="line">  buttonText: &apos;Send&apos;,</div><div class="line">  cancellable: true</div><div class="line">&#125;</div><div class="line"></div><div class="line">function createMenu(config) &#123;</div><div class="line">  config = Object.assign(&#123;</div><div class="line">    title: &apos;Foo&apos;,</div><div class="line">    body: &apos;Bar&apos;,</div><div class="line">    buttonText: &apos;Baz&apos;,</div><div class="line">    cancellable: true</div><div class="line">  &#125;, config);</div><div class="line"></div><div class="line">  // 现在 config 等于: &#123;title: &quot;Foo&quot;, body: &quot;Bar&quot;, buttonText: &quot;Baz&quot;, cancellable: true&#125;</div><div class="line">  // ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">createMenu(menuConfig);</div></pre></td></tr></table></figure>
<h3><a href="#dont-use-flags-as-function-parameters"></a>不要把标记用作函数参数</h3>
<p>标记告诉你的用户这个函数做的事情不止一件。但是函数应该只做一件事。如果你的函数中会根据某个布尔参数产生不同的分支，那就拆分这个函数。</p>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function createFile(name, temp) &#123;</div><div class="line">  if (temp) &#123;</div><div class="line">    fs.create(&apos;./temp/&apos; + name);</div><div class="line">  &#125; else &#123;</div><div class="line">    fs.create(name);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function createTempFile(name) &#123;</div><div class="line">  fs.create(&apos;./temp/&apos; + name);</div><div class="line">&#125;</div><div class="line"></div><div class="line">function createFile(name) &#123;</div><div class="line">  fs.create(name);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3><a href="#avoid-side-effects"></a>避免副作用</h3>
<p>如果一个函数不是获取一个输入的值并返回其它值，它就有可能产生副作用。这些副作用可能是写入文件、修改一些全局变量，或者意外地把你所有钱转给一个陌生人。</p>
<p>现在你确实需要在程序中有副作用。像前面提到的那样，你可能需要写入文件。现在你需要做的事情是搞清楚在哪里集中完成这件事情。不要使用几个函数或类来完成写入某个特定文件的工作。采用一个，就一个服务来完成。</p>
<p>关键点是避免觉的陷阱，比如在没有结构的对象间共享状态，使用可以被任意修改的易变的数据类型，没有集中处理发生的副作用等。如果你能做到，你就能比其他大多数程序员更愉快。</p>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 下面的函数使用了全局变量。</div><div class="line">// 如果有另一个函数在使用 name，现在可能会因为 name 变成了数组而不能正常运行。</div><div class="line">var name = &apos;Ryan McDermott&apos;;</div><div class="line"></div><div class="line">function splitIntoFirstAndLastName() &#123;</div><div class="line">  name = name.split(&apos; &apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">splitIntoFirstAndLastName();</div><div class="line"></div><div class="line">console.log(name); // [&apos;Ryan&apos;, &apos;McDermott&apos;];</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function splitIntoFirstAndLastName(name) &#123;</div><div class="line">  return name.split(&apos; &apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">var name = &apos;Ryan McDermott&apos;</div><div class="line">var newName = splitIntoFirstAndLastName(name);</div><div class="line"></div><div class="line">console.log(name); // &apos;Ryan McDermott&apos;;</div><div class="line">console.log(newName); // [&apos;Ryan&apos;, &apos;McDermott&apos;];</div></pre></td></tr></table></figure>
<h3><a href="#dont-write-to-global-functions"></a>不要写入全局函数</h3>
<p>JavaScript 中全局污染是一件糟糕的事情，因为它可能和另外库发生冲突，然而使用你 API 的用户却不会知道——直到他们在生产中遇到一个异常。来思考一个例子：你想扩展 JavaScript 的原生 Array，使之拥有一个 <code>diff</code> 方法，用来展示两数据之前的区别，这时你会怎么做？你可以给 <code>Array.prototype</code> 添加一个新的函数，但它可能会与其它想做同样事情的库发生冲突。如果那个库实现的 <code>diff</code> 只是比如数组中第一个元素和最后一个元素的异同会发生什么事情呢？这就是为什么最好是使用 ES6 的类语法从全局的 <code>Array</code> 派生一个类来做这件事。</p>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Array.prototype.diff = function(comparisonArray) &#123;</div><div class="line">  var values = [];</div><div class="line">  var hash = &#123;&#125;;</div><div class="line"></div><div class="line">  for (var i of comparisonArray) &#123;</div><div class="line">    hash[i] = true;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  for (var i of this) &#123;</div><div class="line">    if (!hash[i]) &#123;</div><div class="line">      values.push(i);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  return values;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">class SuperArray extends Array &#123;</div><div class="line">  constructor(...args) &#123;</div><div class="line">    super(...args);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  diff(comparisonArray) &#123;</div><div class="line">    var values = [];</div><div class="line">    var hash = &#123;&#125;;</div><div class="line"></div><div class="line">    for (var i of comparisonArray) &#123;</div><div class="line">      hash[i] = true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    for (var i of this) &#123;</div><div class="line">      if (!hash[i]) &#123;</div><div class="line">        values.push(i);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return values;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3><a href="#favor-functional-programming-over-imperative-programming"></a>喜欢上命令式编程之上的函数式编程</h3>
<p>如果 Haskell 是 IPA 那么 JavaScript 就是 O’Douls。就是说，与 Haskell 不同，JavaScript 不是函数式编程语言，不过它仍然有一点函数式的意味。函数式语言更整洁也更容易测试，所以你最好能喜欢上这种编程风格。</p>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">const programmerOutput = [</div><div class="line">  &#123;</div><div class="line">    name: &apos;Uncle Bobby&apos;,</div><div class="line">    linesOfCode: 500</div><div class="line">  &#125;, &#123;</div><div class="line">    name: &apos;Suzie Q&apos;,</div><div class="line">    linesOfCode: 1500</div><div class="line">  &#125;, &#123;</div><div class="line">    name: &apos;Jimmy Gosling&apos;,</div><div class="line">    linesOfCode: 150</div><div class="line">  &#125;, &#123;</div><div class="line">    name: &apos;Gracie Hopper&apos;,</div><div class="line">    linesOfCode: 1000</div><div class="line">  &#125;</div><div class="line">];</div><div class="line"></div><div class="line">var totalOutput = 0;</div><div class="line"></div><div class="line">for (var i = 0; i &lt; programmerOutput.length; i++) &#123;</div><div class="line">  totalOutput += programmerOutput[i].linesOfCode;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">const programmerOutput = [</div><div class="line">  &#123;</div><div class="line">    name: &apos;Uncle Bobby&apos;,</div><div class="line">    linesOfCode: 500</div><div class="line">  &#125;, &#123;</div><div class="line">    name: &apos;Suzie Q&apos;,</div><div class="line">    linesOfCode: 1500</div><div class="line">  &#125;, &#123;</div><div class="line">    name: &apos;Jimmy Gosling&apos;,</div><div class="line">    linesOfCode: 150</div><div class="line">  &#125;, &#123;</div><div class="line">    name: &apos;Gracie Hopper&apos;,</div><div class="line">    linesOfCode: 1000</div><div class="line">  &#125;</div><div class="line">];</div><div class="line"></div><div class="line">var totalOutput = programmerOutput</div><div class="line">  .map((programmer) =&gt; programmer.linesOfCode)</div><div class="line">  .reduce((acc, linesOfCode) =&gt; acc + linesOfCode, 0);</div></pre></td></tr></table></figure>
<h3><a href="#encapsulate-conditionals"></a>封装条件</h3>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if (fsm.state === &apos;fetching&apos; &amp;&amp; isEmpty(listNode)) &#123;</div><div class="line">  /// ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function shouldShowSpinner(fsm, listNode) &#123;</div><div class="line">  return fsm.state === &apos;fetching&apos; &amp;&amp; isEmpty(listNode);</div><div class="line">&#125;</div><div class="line"></div><div class="line">if (shouldShowSpinner(fsmInstance, listNodeInstance)) &#123;</div><div class="line">  // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3><a href="#avoid-negative-conditionals"></a>避免否定条件</h3>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function isDOMNodeNotPresent(node) &#123;</div><div class="line">  // ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">if (!isDOMNodeNotPresent(node)) &#123;</div><div class="line">  // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function isDOMNodePresent(node) &#123;</div><div class="line">  // ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">if (isDOMNodePresent(node)) &#123;</div><div class="line">  // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3><a href="#avoid-conditionals"></a>避免条件</h3>
<p>这似乎是个不可能完成的任务。大多数人第一次听到这个的时候会说，“没有 <code>if</code> 语句我该怎么办？”回答是在多数情况下都可以使用多态来实现相同的任务。第二个问题通常是，“那太好了，不过我为什么要这么做呢？”答案在于我们之前了解过整洁的概念：一个函数应该只做一件事情。如果你的类和函数有 <code>if</code> 语句，就意味着你的函数做了更多的事。记住，只做一件事。</p>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">class Airplane &#123;</div><div class="line">  //...</div><div class="line">  getCruisingAltitude() &#123;</div><div class="line">    switch (this.type) &#123;</div><div class="line">      case &apos;777&apos;:</div><div class="line">        return getMaxAltitude() - getPassengerCount();</div><div class="line">      case &apos;Air Force One&apos;:</div><div class="line">        return getMaxAltitude();</div><div class="line">      case &apos;Cessna&apos;:</div><div class="line">        return getMaxAltitude() - getFuelExpenditure();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">class Airplane &#123;</div><div class="line">  //...</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Boeing777 extends Airplane &#123;</div><div class="line">  //...</div><div class="line">  getCruisingAltitude() &#123;</div><div class="line">    return getMaxAltitude() - getPassengerCount();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class AirForceOne extends Airplane &#123;</div><div class="line">  //...</div><div class="line">  getCruisingAltitude() &#123;</div><div class="line">    return getMaxAltitude();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Cessna extends Airplane &#123;</div><div class="line">  //...</div><div class="line">  getCruisingAltitude() &#123;</div><div class="line">    return getMaxAltitude() - getFuelExpenditure();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3><a href="#avoid-type-checking-part-1"></a>避免类型检查(第1部分)</h3>
<p>JavaScript 是无类型的，也就是说函数可以获取任意类型的参数。有时候你会觉得这种自由是种折磨，因而会不由自主地在函数中使用类型检查。有很多种方法可以避免类型检查。首先要考虑的就是 API 的一致性。</p>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function travelToTexas(vehicle) &#123;</div><div class="line">  if (vehicle instanceof Bicycle) &#123;</div><div class="line">    vehicle.peddle(this.currentLocation, new Location(&apos;texas&apos;));</div><div class="line">  &#125; else if (vehicle instanceof Car) &#123;</div><div class="line">    vehicle.drive(this.currentLocation, new Location(&apos;texas&apos;));</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function travelToTexas(vehicle) &#123;</div><div class="line">  vehicle.move(this.currentLocation, new Location(&apos;texas&apos;));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3><a href="#avoid-type-checking-part-2"></a>避免类型检查(第2部分)</h3>
<p>如果你在处理基本类型的数据，比如字符串，整数和数组，又不能使用多态，这时你会觉得需要使用类型检查，那么可以考虑 TypeScript。这是普通 JavaScript 的完美替代品，它在标准的 JavaScript 语法之上提供了静态类型。普通 JavaScript 手工检查类型的问题在于这样会写很多废话，而人为的“类型安全”并不能弥补损失的可读性。让你的 JavaScript 保持整洁，写很好的测试，并保持良好的代码审查。否则让 TypeScript (我说过，这是很好的替代品)来做所有事情。</p>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function combine(val1, val2) &#123;</div><div class="line">  if (typeof val1 == &quot;number&quot; &amp;&amp; typeof val2 == &quot;number&quot; ||</div><div class="line">      typeof val1 == &quot;string&quot; &amp;&amp; typeof val2 == &quot;string&quot;) &#123;</div><div class="line">    return val1 + val2;</div><div class="line">  &#125; else &#123;</div><div class="line">    throw new Error(&apos;Must be of type String or Number&apos;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function combine(val1, val2) &#123;</div><div class="line">  return val1 + val2;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3><a href="#dont-over-optimize"></a>不要过度优化</h3>
<p>现在浏览器在运行时悄悄地做了很多优化工作。很多时候你的优化都是在浪费时间。<a href="https://github.com/petkaantonov/bluebird/wiki/Optimization-killers" target="_blank" rel="external">这里有很好的资源</a> 可以看看哪些优化比较缺乏。把它们作为目标，直到他们能固定下来的时候。</p>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 在旧浏览器中，每次循环的成本都比较高，因为每次都会重算 `len`。</div><div class="line">// 现在浏览器中，这已经被优化了。</div><div class="line">for (var i = 0, len = list.length; i &lt; len; i++) &#123;</div><div class="line">  // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for (var i = 0; i &lt; list.length; i++) &#123;</div><div class="line">  // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3><a href="#remove-dead-code"></a>删除不用的代码</h3>
<p>不用的代码和重复的代码一样糟糕。在代码库中保留无用的代码是毫无道理的事情。如果某段代码用不到，那就删掉它！如果你以后需要它，仍然可以从代码库的历史版本中找出来。</p>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function oldRequestModule(url) &#123;</div><div class="line">  // ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">function newRequestModule(url) &#123;</div><div class="line">  // ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">var req = newRequestModule;</div><div class="line">inventoryTracker(&apos;apples&apos;, req, &apos;www.inventory-awesome.io&apos;);</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function newRequestModule(url) &#123;</div><div class="line">  // ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">var req = newRequestModule;</div><div class="line">inventoryTracker(&apos;apples&apos;, req, &apos;www.inventory-awesome.io&apos;);</div></pre></td></tr></table></figure>
<h2><a href="#objects-and-data-structures"></a><strong>对象和数据结构</strong></h2>
<h3><a href="#use-getters-and-setters"></a>使用 getter 和 setter</h3>
<p>JavaScript 没有接口或者类型，也没有像 <code>public</code> 和 <code>private</code> 这样的关键字，所以很难应用设计模式。实事上，在对象上使用 getter 和 setter 访问数据远好于直接查找对象属性。“为什么？”你可能会这样问。那好，下面列出了原因：</p>
<ol>
<li>
<p>你想在获取对象属性的时候做更多的事，不必在代码中寻找所有访问的代码来逐个修改。</p>
</li>
<li>
<p>在进行 <code>set</code> 的时候可以进行额外的数据检验。</p>
</li>
<li>
<p>封装内部表现。</p>
</li>
<li>
<p>在获取或设置的时候易于添加日志和错误处理。</p>
</li>
<li>
<p>继承当前类，可以重写默认功能。</p>
</li>
<li>
<p>可以对对象属性进行懒加载，比如说从服务器获取属性的数据。</p>
</li>
</ol>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">class BankAccount &#123;</div><div class="line">  constructor() &#123;</div><div class="line">       this.balance = 1000;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">let bankAccount = new BankAccount();</div><div class="line"></div><div class="line">// 买鞋...</div><div class="line">bankAccount.balance = bankAccount.balance - 100;</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">class BankAccount &#123;</div><div class="line">  constructor() &#123;</div><div class="line">       this.balance = 1000;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  // It doesn&apos;t have to be prefixed with `get` or `set` to be a getter/setter</div><div class="line">  withdraw(amount) &#123;</div><div class="line">    if (verifyAmountCanBeDeducted(amount)) &#123;</div><div class="line">      this.balance -= amount;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">let bankAccount = new BankAccount();</div><div class="line"></div><div class="line">// 买鞋...</div><div class="line">bankAccount.withdraw(100);</div></pre></td></tr></table></figure>
<h3><a href="#make-objects-have-private-members"></a>让对象拥有私有成员</h3>
<p>这可以通过闭包实现(ES5以之前的版本)。</p>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var Employee = function(name) &#123;</div><div class="line">  this.name = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Employee.prototype.getName = function() &#123;</div><div class="line">  return this.name;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var employee = new Employee(&apos;John Doe&apos;);</div><div class="line">console.log(&apos;Employee name: &apos; + employee.getName()); // Employee name: John Doe</div><div class="line">delete employee.name;</div><div class="line">console.log(&apos;Employee name: &apos; + employee.getName()); // Employee name: undefined</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var Employee = (function() &#123;</div><div class="line">  function Employee(name) &#123;</div><div class="line">    this.getName = function() &#123;</div><div class="line">      return name;</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  return Employee;</div><div class="line">&#125;());</div><div class="line"></div><div class="line">var employee = new Employee(&apos;John Doe&apos;);</div><div class="line">console.log(&apos;Employee name: &apos; + employee.getName()); // Employee name: John Doe</div><div class="line">delete employee.name;</div><div class="line">console.log(&apos;Employee name: &apos; + employee.getName()); // Employee name: John Doe</div></pre></td></tr></table></figure>
<h2><a href="#classes"></a><strong>类</strong></h2>
<h3><a href="#single-responsibility-principle-srp"></a>单一职责原则 (SRP)</h3>
<p>正如《代码整洁之道》所说，“不应该有超过一个原因来改变类”。往一个类里塞进许多功能是件诱人的事情，就像在坐飞机的时候只带一个手提箱一样。这带来的问题是，你的类不会在概念上有凝聚力，会有很多因素造成对它的改变。让你的类需要改变的次数最少是件非常重要的事情。这是因为如果一个类里塞入了太多功能，你只修改它的一部分，可能会让人难以理解它为何会影响代码库中其它相关模块。</p>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">class UserSettings &#123;</div><div class="line">  constructor(user) &#123;</div><div class="line">    this.user = user;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  changeSettings(settings) &#123;</div><div class="line">    if (this.verifyCredentials(user)) &#123;</div><div class="line">      // ...</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  verifyCredentials(user) &#123;</div><div class="line">    // ...</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">class UserAuth &#123;</div><div class="line">  constructor(user) &#123;</div><div class="line">    this.user = user;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  verifyCredentials() &#123;</div><div class="line">    // ...</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class UserSettings &#123;</div><div class="line">  constructor(user) &#123;</div><div class="line">    this.user = user;</div><div class="line">    this.auth = new UserAuth(user)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  changeSettings(settings) &#123;</div><div class="line">    if (this.auth.verifyCredentials()) &#123;</div><div class="line">      // ...</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3><a href="#openclosed-principle-ocp"></a>开放封装原则(OCP)</h3>
<p>正如 Bertrand Meyer 所说，“软件实体(类、模块、函数等)应该对扩展开放，对修改封闭。”这是什么意思呢？这个原则基本上规定了你应该允许用户扩展你的模块，但不需要打开 <code>.js</code> 源代码文件来进行编辑。</p>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class AjaxRequester &#123;</div><div class="line">  constructor() &#123;</div><div class="line">    // 如果我们需要另一个 HTTP 方法，比如 DELETE，该怎么办？</div><div class="line">    // 我们必须打开这个文件然后手工把它加进去</div><div class="line">    this.HTTP_METHODS = [&apos;POST&apos;, &apos;PUT&apos;, &apos;GET&apos;];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  get(url) &#123;</div><div class="line">    // ...</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">class AjaxRequester &#123;</div><div class="line">  constructor() &#123;</div><div class="line">    this.HTTP_METHODS = [&apos;POST&apos;, &apos;PUT&apos;, &apos;GET&apos;];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  get(url) &#123;</div><div class="line">    // ...</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  addHTTPMethod(method) &#123;</div><div class="line">    this.HTTP_METHODS.push(method);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3><a href="#liskov-substitution-principle-lsp"></a>里氏替换原则(LSP)</h3>
<p>这是一个吓人的术语，但描述的却是个简单的概念。它的正式定义为“如果 S 是 T 的子类，那所有 T 类型的对象都可以替换为 S 类型的对象(即 S 类型的对象可以替代 T 类型的对象)，这个替换不会改变程序的任何性质(正确性、任务执行等)。”这确实是个吓人的定义。</p>
<p>对此最好的解释是，如果你有父类和子类，那么父类和子类可以交替使用而不会造成不正确的结果。这可能仍然让人感到疑惑，那么让我们看看经典的正方形和矩形的例子。在数学上，正方形也是矩形，但是如果你在模型中通过继承使用 “is-a” 关系，你很快就会陷入困境。</p>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">class Rectangle &#123;</div><div class="line">  constructor() &#123;</div><div class="line">    this.width = 0;</div><div class="line">    this.height = 0;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  setColor(color) &#123;</div><div class="line">    // ...</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render(area) &#123;</div><div class="line">    // ...</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  setWidth(width) &#123;</div><div class="line">    this.width = width;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  setHeight(height) &#123;</div><div class="line">    this.height = height;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  getArea() &#123;</div><div class="line">    return this.width * this.height;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Square extends Rectangle &#123;</div><div class="line">  constructor() &#123;</div><div class="line">    super();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  setWidth(width) &#123;</div><div class="line">    this.width = width;</div><div class="line">    this.height = width;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  setHeight(height) &#123;</div><div class="line">    this.width = height;</div><div class="line">    this.height = height;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function renderLargeRectangles(rectangles) &#123;</div><div class="line">  rectangles.forEach((rectangle) =&gt; &#123;</div><div class="line">    rectangle.setWidth(4);</div><div class="line">    rectangle.setHeight(5);</div><div class="line">    let area = rectangle.getArea(); // 不好：这里对正方形会返回 25，但应该是 20.</div><div class="line">    rectangle.render(area);</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">let rectangles = [new Rectangle(), new Rectangle(), new Square()];</div><div class="line">renderLargeRectangles(rectangles);</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">class Shape &#123;</div><div class="line">  constructor() &#123;&#125;</div><div class="line"></div><div class="line">  setColor(color) &#123;</div><div class="line">    // ...</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render(area) &#123;</div><div class="line">    // ...</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Rectangle extends Shape &#123;</div><div class="line">  constructor() &#123;</div><div class="line">    super();</div><div class="line">    this.width = 0;</div><div class="line">    this.height = 0;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  setWidth(width) &#123;</div><div class="line">    this.width = width;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  setHeight(height) &#123;</div><div class="line">    this.height = height;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  getArea() &#123;</div><div class="line">    return this.width * this.height;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Square extends Shape &#123;</div><div class="line">  constructor() &#123;</div><div class="line">    super();</div><div class="line">    this.length = 0;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  setLength(length) &#123;</div><div class="line">    this.length = length;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  getArea() &#123;</div><div class="line">    return this.length * this.length;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function renderLargeShapes(shapes) &#123;</div><div class="line">  shapes.forEach((shape) =&gt; &#123;</div><div class="line">    switch (shape.constructor.name) &#123;</div><div class="line">      case &apos;Square&apos;:</div><div class="line">        shape.setLength(5);</div><div class="line">      case &apos;Rectangle&apos;:</div><div class="line">        shape.setWidth(4);</div><div class="line">        shape.setHeight(5);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    let area = shape.getArea();</div><div class="line">    shape.render(area);</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">let shapes = [new Rectangle(), new Rectangle(), new Square()];</div><div class="line">renderLargeShapes(shapes);</div></pre></td></tr></table></figure>
<h3><a href="#interface-segregation-principle-isp"></a>接口隔离原则(ISP)</h3>
<p>JavaScript 中没有接口，所以实行这个原则不能像其它语言那样严格。然而即使对 JavaScript 的弱类型系统来说，它仍然是重要的相关。</p>
<p>ISP 指出，“客户不应该依赖于那些他们不使用的接口。” 由于 Duck Typing 理论，接口在 JavaScript 中是个隐性契约。</p>
<p>在 JavaScript 中有一个很好的例子来演示这个原则，即一个拥有巨大设置对象的类。比较好的做法是不要求客户设置大量的选项，因为多数时候他们不需要所有设置。让这些选项成为可选的有助于防止“胖接口”。</p>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class DOMTraverser &#123;</div><div class="line">  constructor(settings) &#123;</div><div class="line">    this.settings = settings;</div><div class="line">    this.setup();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  setup() &#123;</div><div class="line">    this.rootNode = this.settings.rootNode;</div><div class="line">    this.animationModule.setup();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  traverse() &#123;</div><div class="line">    // ...</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">let $ = new DOMTraverser(&#123;</div><div class="line">  rootNode: document.getElementsByTagName(&apos;body&apos;),</div><div class="line">  animationModule: function() &#123;&#125; // 多数时候我们不需要动画</div><div class="line">  // ...</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">class DOMTraverser &#123;</div><div class="line">  constructor(settings) &#123;</div><div class="line">    this.settings = settings;</div><div class="line">    this.options = settings.options;</div><div class="line">    this.setup();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  setup() &#123;</div><div class="line">    this.rootNode = this.settings.rootNode;</div><div class="line">    this.setupOptions();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  setupOptions() &#123;</div><div class="line">    if (this.options.animationModule) &#123;</div><div class="line">      // ...</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  traverse() &#123;</div><div class="line">    // ...</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">let $ = new DOMTraverser(&#123;</div><div class="line">  rootNode: document.getElementsByTagName(&apos;body&apos;),</div><div class="line">  options: &#123;</div><div class="line">    animationModule: function() &#123;&#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3><a href="#dependency-inversion-principle-dip"></a>依赖倒置原则(DIP)</h3>
<p>这个原则说明了两个基本问题：</p>
<p>1. 上层模块不应该依赖下层模块，两者都应该依赖抽象。</p>
<p>2. 抽象不应该依赖于具体实现，具体实现应该依赖于抽象。</p>
<p>这一开始可能很难理解，但是如果你使用 Angular.js，你已经看到了对这个原则的一种实现形式：依赖注入(DI)。虽然它们不是完全相同的概念，DIP 阻止上层模块去了解下层模块的细节并设置它们。它可以通过 DI 来实现。这带来的巨大好处降低了模块间的耦合。耦合是种非常不好的开发模式，因为它让代码难以重构。</p>
<p>前提已经提到，JavaScript 没有接口，因此抽象依赖于隐性契约。也就是说，一个对象/类会把方法和属性暴露给另一个对象/类。在下面的例子中，隐性契约是任何用于 <code>InventoryTracker</code> 的 Request 模块都应该拥有 <code>requestItems</code> 方法。</p>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">class InventoryTracker &#123;</div><div class="line">  constructor(items) &#123;</div><div class="line">    this.items = items;</div><div class="line"></div><div class="line">    // 不好：我们创建了一个依赖于特定请求的实现。</div><div class="line">    // 我们应该只依赖请求方法：`request` 的 requestItems</div><div class="line">    this.requester = new InventoryRequester();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  requestItems() &#123;</div><div class="line">    this.items.forEach((item) =&gt; &#123;</div><div class="line">      this.requester.requestItem(item);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class InventoryRequester &#123;</div><div class="line">  constructor() &#123;</div><div class="line">    this.REQ_METHODS = [&apos;HTTP&apos;];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  requestItem(item) &#123;</div><div class="line">    // ...</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">let inventoryTracker = new InventoryTracker([&apos;apples&apos;, &apos;bananas&apos;]);</div><div class="line">inventoryTracker.requestItems();</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">class InventoryTracker &#123;</div><div class="line">  constructor(items, requester) &#123;</div><div class="line">    this.items = items;</div><div class="line">    this.requester = requester;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  requestItems() &#123;</div><div class="line">    this.items.forEach((item) =&gt; &#123;</div><div class="line">      this.requester.requestItem(item);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class InventoryRequesterV1 &#123;</div><div class="line">  constructor() &#123;</div><div class="line">    this.REQ_METHODS = [&apos;HTTP&apos;];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  requestItem(item) &#123;</div><div class="line">    // ...</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class InventoryRequesterV2 &#123;</div><div class="line">  constructor() &#123;</div><div class="line">    this.REQ_METHODS = [&apos;WS&apos;];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  requestItem(item) &#123;</div><div class="line">    // ...</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 通过构建外部依赖并注入它们，我们很容易把请求模块替换成</div><div class="line">// 一个使用 WebSocket 的新模块。</div><div class="line">let inventoryTracker = new InventoryTracker([&apos;apples&apos;, &apos;bananas&apos;], new InventoryRequesterV2());</div><div class="line">inventoryTracker.requestItems();</div></pre></td></tr></table></figure>
<h3><a href="#prefer-es6-classes-over-es5-plain-functions"></a>多用 ES6 类语法，少用 ES5 构造函数语法</h3>
<p>在经典的 ES5 的类定义中，很难找到易读的继承、构造、方法定义等。如果你需要继承(你会发现做不到)，那就应该使用类语法。不过，应该尽可能使用小函数而不是类，直到你需要更大更复杂的对象。</p>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">var Animal = function(age) &#123;</div><div class="line">    if (!(this instanceof Animal)) &#123;</div><div class="line">        throw new Error(&quot;Instantiate Animal with `new`&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    this.age = age;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Animal.prototype.move = function() &#123;&#125;;</div><div class="line"></div><div class="line">var Mammal = function(age, furColor) &#123;</div><div class="line">    if (!(this instanceof Mammal)) &#123;</div><div class="line">        throw new Error(&quot;Instantiate Mammal with `new`&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Animal.call(this, age);</div><div class="line">    this.furColor = furColor;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Mammal.prototype = Object.create(Animal.prototype);</div><div class="line">Mammal.prototype.constructor = Mammal;</div><div class="line">Mammal.prototype.liveBirth = function() &#123;&#125;;</div><div class="line"></div><div class="line">var Human = function(age, furColor, languageSpoken) &#123;</div><div class="line">    if (!(this instanceof Human)) &#123;</div><div class="line">        throw new Error(&quot;Instantiate Human with `new`&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Mammal.call(this, age, furColor);</div><div class="line">    this.languageSpoken = languageSpoken;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Human.prototype = Object.create(Mammal.prototype);</div><div class="line">Human.prototype.constructor = Human;</div><div class="line">Human.prototype.speak = function() &#123;&#125;;</div></pre></td></tr></table></figure>
<p><strong>好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">class Animal &#123;</div><div class="line">    constructor(age) &#123;</div><div class="line">        this.age = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    move() &#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Mammal extends Animal &#123;</div><div class="line">    constructor(age, furColor) &#123;</div><div class="line">        super(age);</div><div class="line">        this.furColor = furColor;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    liveBirth() &#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Human extends Mammal &#123;</div><div class="line">    constructor(age, furColor, languageSpoken) &#123;</div><div class="line">        super(age, furColor);</div><div class="line">        this.languageSpoken = languageSpoken;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    speak() &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3><a href="#use-method-chaining"></a>使用方法链</h3>
<p>在这里我的意见与《代码整洁之道》的观点不同。有人认为方法链不整洁，而且违反了<a href="https://en.wikipedia.org/wiki/Law_of_Demeter" target="_blank" rel="external">得墨忒耳定律</a>。也许他们是对的，但这个模式在 JavaScript 中非常有用，你可以很多库中看到，比如 jQuery 和 Lodash。它让代码变得既简洁又有表现力。在类中，只需要在每个函数结束前返回 <code>this</code>，就实现了链式调用的类方法。</p>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">class Car &#123;</div><div class="line">  constructor() &#123;</div><div class="line">    this.make = &apos;Honda&apos;;</div><div class="line">    this.model = &apos;Accord&apos;;</div><div class="line">    this.color = &apos;white&apos;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  setMake(make) &#123;</div><div class="line">    this.name = name;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  setModel(model) &#123;</div><div class="line">    this.model = model;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  setColor(color) &#123;</div><div class="line">    this.color = color;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  save() &#123;</div><div class="line">    console.log(this.make, this.model, this.color);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">let car = new Car();</div><div class="line">car.setColor(&apos;pink&apos;);</div><div class="line">car.setMake(&apos;Ford&apos;);</div><div class="line">car.setModel(&apos;F-150&apos;)</div><div class="line">car.save();</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">class Car &#123;</div><div class="line">  constructor() &#123;</div><div class="line">    this.make = &apos;Honda&apos;;</div><div class="line">    this.model = &apos;Accord&apos;;</div><div class="line">    this.color = &apos;white&apos;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  setMake(make) &#123;</div><div class="line">    this.name = name;</div><div class="line">    // NOTE: 返回 this 以实现链式调用</div><div class="line">    return this;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  setModel(model) &#123;</div><div class="line">    this.model = model;</div><div class="line">    // NOTE: 返回 this 以实现链式调用</div><div class="line">    return this;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  setColor(color) &#123;</div><div class="line">    this.color = color;</div><div class="line">    // NOTE: 返回 this 以实现链式调用</div><div class="line">    return this;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  save() &#123;</div><div class="line">    console.log(this.make, this.model, this.color);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">let car = new Car()</div><div class="line">  .setColor(&apos;pink&apos;)</div><div class="line">  .setMake(&apos;Ford&apos;)</div><div class="line">  .setModel(&apos;F-150&apos;)</div><div class="line">  .save();</div></pre></td></tr></table></figure>
<h3><a href="#prefer-composition-over-inheritance"></a>多用组合，少用继承</h3>
<p>大家都知道 GoF 的<a href="https://en.wikipedia.org/wiki/Design_Patterns" target="_blank" rel="external"><em>设计模式</em></a>，其中提到应该多用组合而不是继承。对于继承和组合，都有大量的理由在支撑，但这个准则的要点在于，你的想法本能地会想到继承，但这时候不防多思考一下用组合是否能更好的处理问题——某些时候，的确能。</p>
<p>你可能会考虑：“我什么时候该用继承？”这取决于你遇到的问题。这里有一个不错的清单说明了什么时候用继承比用组合更合适：</p>
<ol>
<li>
<p>你的继承是一个“is-a”关系，而不是“has-a”关系(Animal-&gt;Human 对比 User-&gt;UserDetails)。</p>
</li>
<li>
<p>可以从基础复用代码 (人可以像所有动物一样移动)。</p>
</li>
<li>
<p>你想通过修改基础来实现对所有子类的全局性更改。(改变动物移动时的热量消耗)。</p>
</li>
</ol>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">class Employee &#123;</div><div class="line">  constructor(name, email) &#123;</div><div class="line">    this.name = name;</div><div class="line">    this.email = email;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  // ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 这样不好，因为 Employees &quot;拥有&quot; 税务数据。EmployeeTaxData 不是属于 Employee 的一个类型</div><div class="line">class EmployeeTaxData extends Employee &#123;</div><div class="line">  constructor(ssn, salary) &#123;</div><div class="line">    super();</div><div class="line">    this.ssn = ssn;</div><div class="line">    this.salary = salary;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class Employee &#123;</div><div class="line">  constructor(name, email) &#123;</div><div class="line">    this.name = name;</div><div class="line">    this.email = email;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  setTaxData(ssn, salary) &#123;</div><div class="line">    this.taxData = new EmployeeTaxData(ssn, salary);</div><div class="line">  &#125;</div><div class="line">  // ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">class EmployeeTaxData &#123;</div><div class="line">  constructor(ssn, salary) &#123;</div><div class="line">    this.ssn = ssn;</div><div class="line">    this.salary = salary;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2><a href="#testing"></a><strong>测试</strong></h2>
<p>测试比生产更重要。如果你不进行测试，或者测试的量不够，那你就不能肯定你写的代码不会造成破坏。测试数量依靠你的开发团队来决定，但 100% 覆盖率(所有语句和分支)能让你拥有巨大的信心，也能使程序员们安心。也就是说，你需要一个不错的测试框架，还需要一个<a href="http://gotwarlost.github.io/istanbul/" target="_blank" rel="external">好的覆盖检查工具</a>.</p>
<p>没有什么理由可以让你不写测试。这里有 <a href="http://jstherightway.org/#testing-tools" target="_blank" rel="external">大量不错的 JS 测试框架</a>，可以去找个你们团队喜欢的来用。如果你找一个适合在你的团队中使用的工作，就把为每个新产生的特性/方法添加测试作为目标。如果你喜欢测试驱动开发(TDD)的方法，非常好，但要注意在让你的测试覆盖所有特性，或者重构过的代码。</p>
<h3><a href="#single-concept-per-test"></a>每次测试一个概念</h3>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">const assert = require(&apos;assert&apos;);</div><div class="line"></div><div class="line">describe(&apos;MakeMomentJSGreatAgain&apos;, function() &#123;</div><div class="line">  it(&apos;handles date boundaries&apos;, function() &#123;</div><div class="line">    let date;</div><div class="line"></div><div class="line">    date = new MakeMomentJSGreatAgain(&apos;1/1/2015&apos;);</div><div class="line">    date.addDays(30);</div><div class="line">    date.shouldEqual(&apos;1/31/2015&apos;);</div><div class="line"></div><div class="line">    date = new MakeMomentJSGreatAgain(&apos;2/1/2016&apos;);</div><div class="line">    date.addDays(28);</div><div class="line">    assert.equal(&apos;02/29/2016&apos;, date);</div><div class="line"></div><div class="line">    date = new MakeMomentJSGreatAgain(&apos;2/1/2015&apos;);</div><div class="line">    date.addDays(28);</div><div class="line">    assert.equal(&apos;03/01/2015&apos;, date);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">const assert = require(&apos;assert&apos;);</div><div class="line"></div><div class="line">describe(&apos;MakeMomentJSGreatAgain&apos;, function() &#123;</div><div class="line">  it(&apos;handles 30-day months&apos;, function() &#123;</div><div class="line">    let date = new MakeMomentJSGreatAgain(&apos;1/1/2015&apos;);</div><div class="line">    date.addDays(30);</div><div class="line">    date.shouldEqual(&apos;1/31/2015&apos;);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  it(&apos;handles leap year&apos;, function() &#123;</div><div class="line">    let date = new MakeMomentJSGreatAgain(&apos;2/1/2016&apos;);</div><div class="line">    date.addDays(28);</div><div class="line">    assert.equal(&apos;02/29/2016&apos;, date);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  it(&apos;handles non-leap year&apos;, function() &#123;</div><div class="line">    let date = new MakeMomentJSGreatAgain(&apos;2/1/2015&apos;);</div><div class="line">    date.addDays(28);</div><div class="line">    assert.equal(&apos;03/01/2015&apos;, date);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2><a href="#concurrency"></a><strong>Concurrency</strong></h2>
<h3><a href="#use-promises-not-callbacks"></a>使用 Promise 而不是回调</h3>
<p>回调并不整洁，它会导致过多的嵌套。ES6 的 Promise 是个内置的全局类型。使用它！</p>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">require(&apos;request&apos;).get(&apos;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&apos;, function(err, response) &#123;</div><div class="line">  if (err) &#123;</div><div class="line">    console.error(err);</div><div class="line">  &#125;</div><div class="line">  else &#123;</div><div class="line">    require(&apos;fs&apos;).writeFile(&apos;article.html&apos;, response.body, function(err) &#123;</div><div class="line">      if (err) &#123;</div><div class="line">        console.error(err);</div><div class="line">      &#125; else &#123;</div><div class="line">        console.log(&apos;File written&apos;);</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">require(&apos;request-promise&apos;).get(&apos;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&apos;)</div><div class="line">  .then(function(response) &#123;</div><div class="line">    return require(&apos;fs-promise&apos;).writeFile(&apos;article.html&apos;, response);</div><div class="line">  &#125;)</div><div class="line">  .then(function() &#123;</div><div class="line">    console.log(&apos;File written&apos;);</div><div class="line">  &#125;)</div><div class="line">  .catch(function(err) &#123;</div><div class="line">    console.error(err);</div><div class="line">  &#125;)</div></pre></td></tr></table></figure>
<h3><a href="#asyncawait-are-even-cleaner-than-promises"></a>async/await 比 Promise 还整洁</h3>
<p>与回调相当，Promise 已经相当整洁了，但 ES7 带来了更整洁的解决方案 —— async 和 await。你要做的事情就是在一个函数前加上 <code>async</code> 关键字，然后写下命令形式的逻辑，而不再需要 <code>then</code> 链。现在可以使用这个 ES7 特性带来的便利！</p>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">require(&apos;request-promise&apos;).get(&apos;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&apos;)</div><div class="line">  .then(function(response) &#123;</div><div class="line">    return require(&apos;fs-promise&apos;).writeFile(&apos;article.html&apos;, response);</div><div class="line">  &#125;)</div><div class="line">  .then(function() &#123;</div><div class="line">    console.log(&apos;File written&apos;);</div><div class="line">  &#125;)</div><div class="line">  .catch(function(err) &#123;</div><div class="line">    console.error(err);</div><div class="line">  &#125;)</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">async function getCleanCodeArticle() &#123;</div><div class="line">  try &#123;</div><div class="line">    var request = await require(&apos;request-promise&apos;)</div><div class="line">    var response = await request.get(&apos;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&apos;);</div><div class="line">    var fileHandle = await require(&apos;fs-promise&apos;);</div><div class="line"></div><div class="line">    await fileHandle.writeFile(&apos;article.html&apos;, response);</div><div class="line">    console.log(&apos;File written&apos;);</div><div class="line">  &#125; catch(err) &#123;</div><div class="line">      console.log(err);</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h2><a href="#error-handling"></a><strong>错误处理</strong></h2>
<p>抛出错误是件好事！这表示运行时已经成功检测到程序出错了，它停止当前调用框上的函数执行，并中止进程(在 Node 中)，最后在控制台通知你，并输出栈跟踪信息。</p>
<h3><a href="#dont-ignore-caught-errors"></a>不要忽略捕捉到的错误</h3>
<p>捕捉到错误却什么也不错，你就失去了纠正错误的机会。多数情况下把错误记录到控制台(<code>console.log</code>)也不比忽略它好多少，因为在少量的控制台信息中很难发现这一条。如果尝试在 <code>try/catch</code> 中封装代码，就意味着你知道这里可能发生错，你应该在错误发生的时候有应对的计划、或者处理办法。</p>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">try &#123;</div><div class="line">  functionThatMightThrow();</div><div class="line">&#125; catch (error) &#123;</div><div class="line">  console.log(error);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">try &#123;</div><div class="line">  functionThatMightThrow();</div><div class="line">&#125; catch (error) &#123;</div><div class="line">  // 选择之一(比 console.log 更闹心)：</div><div class="line">  console.error(error);</div><div class="line">  // 另一个选择：</div><div class="line">  notifyUserOfError(error);</div><div class="line">  // 另一个选择：</div><div class="line">  reportErrorToService(error);</div><div class="line">  // 或者所有上述三种选择！</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3><a href="#dont-ignore-rejected-promises"></a>不要忽视被拒绝的Promise</h3>
<p>这一条与不要忽略从 <code>try/catch</code> 捕捉到的错误有相同的原因。</p>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">getdata()</div><div class="line">.then(data =&gt; &#123;</div><div class="line">  functionThatMightThrow(data);</div><div class="line">&#125;)</div><div class="line">.catch(error =&gt; &#123;</div><div class="line">  console.log(error);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">getdata()</div><div class="line">.then(data =&gt; &#123;</div><div class="line">  functionThatMightThrow(data);</div><div class="line">&#125;)</div><div class="line">.catch(error =&gt; &#123;</div><div class="line">  // 选择之一(比 console.log 更闹心)：</div><div class="line">  console.error(error);</div><div class="line">  // 另一个选择：</div><div class="line">  notifyUserOfError(error);</div><div class="line">  // 另一个选择：</div><div class="line">  reportErrorToService(error);</div><div class="line">  // 或者所有上述三种选择！</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2><a href="#formatting"></a><strong>格式</strong></h2>
<p>格式是个很主观的东西，像这里提到的许多规则一，你不必完全遵循。要点<strong>不在于争论</strong>格式。<a href="http://standardjs.com/rules.html" target="_blank" rel="external">大量工具</a> 可以自动处理优化格式。用一个！让工程师争论格式问题简直就是在浪费时间和金钱。</p>
<p>对于那些不能自动处理的格式(可以自动处理的包括缩进、Tab或空格、双引号或单引用等)，就看看这里的指导。</p>
<h3><a href="#use-consistent-capitalization"></a>使用一致的大小写</h3>
<p>JavaScript 是无类型的，所以大小写可以帮助你了解变量、函数等。这些规则具有较强的主观性，所以你的团队应该选择需要的。重点不在于你选择了什么，而在于要始终保持一致。</p>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var DAYS_IN_WEEK = 7;</div><div class="line">var daysInMonth = 30;</div><div class="line"></div><div class="line">var songs = [&apos;Back In Black&apos;, &apos;Stairway to Heaven&apos;, &apos;Hey Jude&apos;];</div><div class="line">var Artists = [&apos;ACDC&apos;, &apos;Led Zeppelin&apos;, &apos;The Beatles&apos;];</div><div class="line"></div><div class="line">function eraseDatabase() &#123;&#125;</div><div class="line">function restore_database() &#123;&#125;</div><div class="line"></div><div class="line">class animal &#123;&#125;</div><div class="line">class Alpaca &#123;&#125;</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var DAYS_IN_WEEK = 7;</div><div class="line">var DAYS_IN_MONTH = 30;</div><div class="line"></div><div class="line">var songs = [&apos;Back In Black&apos;, &apos;Stairway to Heaven&apos;, &apos;Hey Jude&apos;];</div><div class="line">var artists = [&apos;ACDC&apos;, &apos;Led Zeppelin&apos;, &apos;The Beatles&apos;];</div><div class="line"></div><div class="line">function eraseDatabase() &#123;&#125;</div><div class="line">function restoreDatabase() &#123;&#125;</div><div class="line"></div><div class="line">class Animal &#123;&#125;</div><div class="line">class Alpaca &#123;&#125;</div></pre></td></tr></table></figure>
<h3><a href="#function-callers-and-callees-should-be-close"></a>函数调用者和被调用者应该尽可能放在一起</h3>
<p>如果一个函数调用另一个函数，那应该让他们在源文件中的位置非常接近。理想情况下应该把调用者放在被调用者的正上方，这会让你的代码更易读，因为我们都习惯从上往下读代码，就像读报纸那样。</p>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">class PerformanceReview &#123;</div><div class="line">  constructor(employee) &#123;</div><div class="line">    this.employee = employee;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  lookupPeers() &#123;</div><div class="line">    return db.lookup(this.employee, &apos;peers&apos;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  lookupMananger() &#123;</div><div class="line">    return db.lookup(this.employee, &apos;manager&apos;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  getPeerReviews() &#123;</div><div class="line">    let peers = this.lookupPeers();</div><div class="line">    // ...</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  perfReview() &#123;</div><div class="line">      getPeerReviews();</div><div class="line">      getManagerReview();</div><div class="line">      getSelfReview();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  getManagerReview() &#123;</div><div class="line">    let manager = this.lookupManager();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  getSelfReview() &#123;</div><div class="line">    // ...</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">let review = new PerformanceReview(user);</div><div class="line">review.perfReview();</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">class PerformanceReview &#123;</div><div class="line">  constructor(employee) &#123;</div><div class="line">    this.employee = employee;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  perfReview() &#123;</div><div class="line">      getPeerReviews();</div><div class="line">      getManagerReview();</div><div class="line">      getSelfReview();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  getPeerReviews() &#123;</div><div class="line">    let peers = this.lookupPeers();</div><div class="line">    // ...</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  lookupPeers() &#123;</div><div class="line">    return db.lookup(this.employee, &apos;peers&apos;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  getManagerReview() &#123;</div><div class="line">    let manager = this.lookupManager();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  lookupMananger() &#123;</div><div class="line">    return db.lookup(this.employee, &apos;manager&apos;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  getSelfReview() &#123;</div><div class="line">    // ...</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">let review = new PerformanceReview(employee);</div><div class="line">review.perfReview();</div></pre></td></tr></table></figure>
<h2><a href="#comments"></a><strong>Comments</strong></h2>
<h3><a href="#only-comment-things-that-have-business-logic-complexity"></a>只注释业务逻辑复杂的内容</h3>
<p>注释是用来解释代码的，而不是必须的。好的代码应该 <em>自注释</em>。</p>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">function hashIt(data) &#123;</div><div class="line">  // Hash 码</div><div class="line">  var hash = 0;</div><div class="line"></div><div class="line">  // 字符串长度</div><div class="line">  var length = data.length;</div><div class="line"></div><div class="line">  // 遍历数据中所有字符</div><div class="line">  for (var i = 0; i &lt; length; i++) &#123;</div><div class="line">    // 获取字符编码</div><div class="line">    var char = data.charCodeAt(i);</div><div class="line">    // 生成 Hash</div><div class="line">    hash = ((hash &lt;&lt; 5) - hash) + char;</div><div class="line">    // 转换为32位整数</div><div class="line">    hash = hash &amp; hash;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function hashIt(data) &#123;</div><div class="line">  var hash = 0;</div><div class="line">  var length = data.length;</div><div class="line"></div><div class="line">  for (var i = 0; i &lt; length; i++) &#123;</div><div class="line">    var char = data.charCodeAt(i);</div><div class="line">    hash = ((hash &lt;&lt; 5) - hash) + char;</div><div class="line"></div><div class="line">    // 转换为32位整数</div><div class="line">    hash = hash &amp; hash;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3><a href="#dont-leave-commented-out-code-in-your-codebase"></a>不要把注释掉的代码留在代码库中</h3>
<p>版本控制存在的原因就是保存你的历史代码。</p>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">doStuff();</div><div class="line">// doOtherStuff();</div><div class="line">// doSomeMoreStuff();</div><div class="line">// doSoMuchStuff();</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">doStuff();</div></pre></td></tr></table></figure>
<h3><a href="#dont-have-journal-comments"></a>不需要日志式的注释</h3>
<p>记住，使用版本控制！没用的代码、注释掉的代码，尤其是日志式的注释。用 <code>git log</code> 来获取历史信息！</p>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 2016-12-20: Removed monads, didn&apos;t understand them (RM)</div><div class="line"> * 2016-10-01: Improved using special monads (JP)</div><div class="line"> * 2016-02-03: Removed type-checking (LI)</div><div class="line"> * 2015-03-14: Added combine with type-checking (JR)</div><div class="line"> */</div><div class="line">function combine(a, b) &#123;</div><div class="line">  return a + b;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function combine(a, b) &#123;</div><div class="line">  return a + b;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3><a href="#avoid-positional-markers"></a>避免位置标记</h3>
<p>位置标记通常只会添加垃圾信息。通过对函数或变量名以及适当的缩进就能为代码带来良好的可视化结构。</p>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">////////////////////////////////////////////////////////////////////////////////</div><div class="line">// Scope Model Instantiation</div><div class="line">////////////////////////////////////////////////////////////////////////////////</div><div class="line">let $scope.model = &#123;</div><div class="line">  menu: &apos;foo&apos;,</div><div class="line">  nav: &apos;bar&apos;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">////////////////////////////////////////////////////////////////////////////////</div><div class="line">// Action setup</div><div class="line">////////////////////////////////////////////////////////////////////////////////</div><div class="line">let actions = function() &#123;</div><div class="line">  // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">let $scope.model = &#123;</div><div class="line">  menu: &apos;foo&apos;,</div><div class="line">  nav: &apos;bar&apos;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">let actions = function() &#123;</div><div class="line">  // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3><a href="#avoid-legal-comments-in-source-files"></a>避免在源文件中添加版权注释</h3>
<p>这是代码文件树顶层的 <code>LICENSE</code> 文件应该干的事情。</p>
<p><strong>不好:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">The MIT License (MIT)</div><div class="line"></div><div class="line">Copyright (c) 2016 Ryan McDermott</div><div class="line"></div><div class="line">Permission is hereby granted, free of charge, to any person obtaining a copy</div><div class="line">of this software and associated documentation files (the &quot;Software&quot;), to deal</div><div class="line">in the Software without restriction, including without limitation the rights</div><div class="line">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</div><div class="line">copies of the Software, and to permit persons to whom the Software is</div><div class="line">furnished to do so, subject to the following conditions:</div><div class="line"></div><div class="line">The above copyright notice and this permission notice shall be included in all</div><div class="line">copies or substantial portions of the Software.</div><div class="line"></div><div class="line">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</div><div class="line">IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</div><div class="line">FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</div><div class="line">AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</div><div class="line">LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</div><div class="line">OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</div><div class="line">SOFTWARE</div><div class="line">*/</div><div class="line"></div><div class="line">function calculateBill() &#123;</div><div class="line">  // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>好</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function calculateBill() &#123;</div><div class="line">  // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[卡少2016年终总结]]></title>
      <url>http://geekarl.com/2016/12/31/personal-summarize/</url>
      <content type="html"><![CDATA[<!-- excerpt -->
<h1>个人2016年终总结</h1>
<hr>
<h3>在2016年里发生了很多事情，从最开始1月3号的经历和拜别，春节期间的决心，四月份的离职，脱产学习，并找项目练手，学习各种前沿技术，一转眼已经在北京入职两个月了，期间种种，真是令人唏嘘不已。</h3>
<h2><p style="text-indent:32px;">2016年在前端领域有了长足的进步，虽然相关的资料都是在2015年准备的，但真正下决心去做，还是在2016年，过往经历让这个时间段的心比任何时候都平稳的多，也多亏了家人的支持和鼓励，使我一个人的探索和求知之旅也不显得那么的沉重和迷茫。</p></h2>
<p style="text-indent:32px;">网上听课，找项目练手，接触真实项目，锻炼前端代码的思维和良好的代码结构，虽然在大学期间有用matlab和C语言的经历，但JS这种语言还是有所不同，在北京未入职期间学了不少ES6的内容，得以在入职后得到了比较好的锻炼，这一过程中我发现对比起前端层出不穷的新东西，代码编写的良好习惯和可维护性才是核心，因为新的东西都还是要归结到代码上来体现，只有良好的代码书写习惯和恰当的函数抽象，面向对象技巧的运用才是完成工作的重要依靠。有一句话说的好，既然是作为工作，那自己必须得擅长才行。未来必须持续的学习和吸收先辈们良好的代码思维和编码习惯，并多加思考，多加总结才能提升的更快。</p>
<p style="text-indent:32px;">现在审视一下自己的技术领域，工作后现在都没怎么切过图，但nodejs工具和git代码协作相关的技能增加了不少，前端的知识确实比较杂，但这两点都是工作中不可或缺的，其实一开始只是用的很简单的方面，但随着项目的深入和需要，在同事大神们的帮助下得以很快的掌握。现在写H5页面的速度肯定不如之前，但vue框架的使用数量了不少，有得必有失，近来工作比较繁忙，确实对于工作外的技能精进关注度不够，2017年应该在工作时间之外给自己制定相应的计划，从而拥有更多的技术储备。</p>
<h2><p style="text-indent:32px;">目前而言，H5的相关新标签已经不算新了，在页面上已经普及，JS的ES2017也在路上，并且在新的项目中开始使用，鉴于有些企业已经放弃兼容IE8，新框架的春天马上就到了吧，我也应该在这个技术发展的路上重点关注SCSS的编写，各种nodejs自动化的使用和框架搭建（这方面要多参加同事们的技术交流），JS代码的可维护性和抽象函数技巧。我觉得作为一名职业的前端工程师，这些是基本的工作能力，不过这些能力在工作中会得到持续的锻炼，我觉得只要肯琢磨就会进步。另一方面是针对新的轮子和技术领域，我觉得应该多关注新的技术发展苗头，不一定非要掌握的多好，但别人的代码和思维还是要有所借鉴，取其精华，去其糟耙，只有加入自己的思考才是自己的东西，相信这些积累也会在未来大有益处。不过在这里要提醒自己，不能被前端的浮躁之风所影响，必须要踏踏实实做事，不可急于求成。</p></h2>
<p style="text-indent:32px;">审视一下生活，现在一起住的小伙伴都挺可靠，不过跟北京的亲戚朋友的联系还没跟上，一方面是工作刚上手时比较紧张，下班都9点多了，还常常在周末加班。另外就是好久不联系，总有种说不清的尴尬？ 不过元旦就在眼前，就趁这个节日跟以前大学的小伙伴们打声招呼，告诉他们卡少back again【手动滑稽】</p>
<p style="text-indent:32px;">展望新的2017年，将会在前端的路上越走越远，也希望自己的技术能力更上一层楼，现在前端的人才是越来越多，希望迷之自信伴我一路同行，并赐予我不断接受挑战的勇气。新的一年，要增强自己的抗压能力，交流沟通能力，以及最为抽象的核心竞争力。</p>
PS: 新的一年，积攒人品，期待爆发 哦哦]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[techniques about VsCode]]></title>
      <url>http://geekarl.com/2016/10/25/techniques-about-VsCode/</url>
      <content type="html"><![CDATA[<!-- excerpt -->
<h2>VScode的插件记录</h2>
<hr>
<article>
    <p>用VS code来做网页web开发，目前安装的插件有
    <ul>
        <li>HTML Snippets</li>
        <li>JavaScript Snippet Pack</li>
        <li>jQuery Code Snippets(jQuery提示)</li>
        <li>HTML CSS Support(CSS提示)</li>
        <li>Path Intellisense(HTML中SRC路径自动补全)</li>
        <li>View In Browser(按Ctrl+F1快速在浏览器里浏览)</li>
        <li>HTML CSS Class Completion(写类时的自动提示补全)</li>
        <li>Sass(用scss写css时的语法高亮提示)</li>
        <li>vscode-icons(文件前显示各种图标，一目了然)</li>
        <li>Start git-bash(与git的bash绑定 不常用)</li>
    </ul>
    使用后发现其实VScode原本就支持Emmet和原生JS方法的各种提示，所以上手比较容易，比ST好的一点就是可以直接跳转到文件或者函数的定义位置.
    </p>
    <p>
        自定义的快捷键代码(文件名keybindings.json)：
<pre><code>    <figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">    &#123;</div><div class="line">    <span class="attr">"key"</span>: <span class="string">"alt+e"</span>,</div><div class="line">    <span class="attr">"command"</span>: <span class="string">"cursorEnd"</span>,</div><div class="line">    <span class="attr">"when"</span>: <span class="string">"editorTextFocus"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="attr">"key"</span>: <span class="string">"alt+d"</span>,</div><div class="line">        <span class="attr">"command"</span>: <span class="string">"cursorDown"</span>,</div><div class="line">        <span class="attr">"when"</span>: <span class="string">"editorTextFocus"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="attr">"key"</span>: <span class="string">"alt+j"</span>,</div><div class="line">        <span class="attr">"command"</span>: <span class="string">"scrollLineDown"</span>,</div><div class="line">        <span class="attr">"when"</span>: <span class="string">"editorTextFocus"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="attr">"key"</span>: <span class="string">"alt+h"</span>,</div><div class="line">        <span class="attr">"command"</span>: <span class="string">"scrollLineUp"</span>,</div><div class="line">        <span class="attr">"when"</span>: <span class="string">"editorTextFocus"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="attr">"key"</span>: <span class="string">"ctrl+d"</span>,</div><div class="line">        <span class="attr">"command"</span>: <span class="string">"editor.action.copyLinesDownAction"</span>,</div><div class="line">        <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="attr">"key"</span>: <span class="string">"alt+l"</span>,</div><div class="line">        <span class="attr">"command"</span>: <span class="string">"cursorRight"</span>,</div><div class="line">        <span class="attr">"when"</span>: <span class="string">"editorTextFocus"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="attr">"key"</span>: <span class="string">"ctrl+y"</span>,</div><div class="line">        <span class="attr">"command"</span>: <span class="string">"editor.action.deleteLines"</span>,</div><div class="line">        <span class="attr">"when"</span>: <span class="string">"editorTextFocus &amp;&amp; !editorReadonly"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="attr">"key"</span>: <span class="string">"alt+k"</span>,</div><div class="line">        <span class="attr">"command"</span>: <span class="string">"cursorLeft"</span>,</div><div class="line">        <span class="attr">"when"</span>: <span class="string">"editorTextFocus"</span></div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure>

    *在新电脑上配置VS的内容如上，也希望能给他人一个参考，有新发现随时补充。*
&lt;/p&gt;
</code></pre>
</p></article>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[用CSS实现居中的总结]]></title>
      <url>http://geekarl.com/2016/09/14/CSS-center/</url>
      <content type="html"><![CDATA[<!-- excerpt -->
<h3>行内或者行内块元素居中</h3>
<p>1.单行竖直居中</p>
<blockquote>
<p>给行内元素添加上下相同大小的<code>padding</code>值即可<br>
设置元素的<code>line-height</code>等于父容器的高度，也可以竖直居中<br>
使用弹性盒子<code>Flex</code>后，设置<code>align-items</code>为<code>center</code><br>
涉及到图片文字混排竖直居中使用vertical-align，可以使用伪元素加入以下代码</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">container</span><span class="selector-pseudo">::after</span>&#123;</div><div class="line">    <span class="attribute">content</span>:<span class="string">''</span>;</div><div class="line">    <span class="attribute">display</span>:inline;</div><div class="line">    <span class="attribute">vertical-align</span>:middle;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.多行文字竖直居中</p>
<blockquote>
<p>设置<code>padding</code>值仍然适用<br>
若要使用<code>vertical-align</code>属性来垂直居中，可以将父容器设置为<code>table</code>，需要居中的元素<code>display</code>设置为<code>table-cell</code>，从而完成所需效果。<br>
使用弹性盒子<code>Flex</code>后，设置<code>align-content</code>为<code>center</code></p>
</blockquote>
<p>3.水平居中</p>
<blockquote>
<p>使用<code>text-align</code>设置为<code>center</code>。<br>
使用弹性盒子<code>Flex</code>后，设置<code>justify-content</code>为<code>center</code></p>
</blockquote>
<h3>块元素居中</h3>
<p>1.竖直居中</p>
<blockquote>
<p>使用定位，若是浮动的元素需要一个多余的元素来包裹要居中的元素，需要设置<code>position:relative</code>，而后设置<code>top:50%;</code>子元素设置相反方向50%，如<code>top:-50%;</code>。<br>
使用定位，若是绝对定位的元素，在宽度已知时，先绝对定位<code>top:50%</code>，利用margin为负值的特性向左移动自身宽度的一半。若宽度未知，可使用<code>transform:translateY(-50%)</code>实现。通用scss的mixin如下：</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@mixin abs_h_center($width)&#123;</div><div class="line">    position: absolute;</div><div class="line">    width: $width;</div><div class="line">    left: 50%;</div><div class="line">    margin-left: -($width/2);</div><div class="line">&#125;</div><div class="line">@mixin abs_v_center($height)&#123;</div><div class="line">    position: absolute;</div><div class="line">    height: $height;</div><div class="line">    top: 50%;</div><div class="line">    margin-top: -($height/2);</div><div class="line">&#125;</div><div class="line">/*使用的例子*/</div><div class="line">.content&#123;</div><div class="line">    @include abs_v_center(200px);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.水平居中</p>
<blockquote>
<p>弹性盒子的设置方法同行内元素，不在赘述<br>
对于宽度已定的块元素直接使用<code>margin:0 auto</code>属性水平居中<br>
若宽度不确定，应该使用<code>table</code>来完成布局，也设置<code>margin:0 auto</code><br>
使用定位，若是浮动的元素，需要设置<code>position:relative</code>，而后设置<code>left:50%;</code>子元素设置相反方向50%，如<code>left:-50%;</code>。<br>
使用定位，若是绝对定位的元素，在宽度已知时，先绝对定位<code>left:50%</code>，利用margin为负值的特性向左移动自身宽度的一半。若宽度未知，可使用<code>transform:translateX(-50%)</code>实现。</p>
</blockquote>
<h3>水平竖直同时居中的大招</h3>
<p>1.直接上代码（兼容IE8+）</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>; <span class="attribute">height</span>:<span class="number">200px</span>; <span class="attribute">border</span>:<span class="number">1px</span> solid red; <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.child</span>&#123;</div><div class="line">    <span class="attribute">background</span>:<span class="number">#000</span>; <span class="attribute">position</span>:absolute; <span class="attribute">width</span>:<span class="number">100px</span>; <span class="attribute">height</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">left</span>:<span class="number">0</span>; <span class="attribute">right</span>:<span class="number">0</span>; <span class="attribute">top</span>:<span class="number">0</span>; <span class="attribute">bottom</span>:<span class="number">0</span>; <span class="attribute">margin</span>:auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里如果不定义元素的宽和高的话，那么他的宽就会由left,right的值来决定，高会由top,bottom的值来决定，所以必须要设置元素的高和宽。同时如果改变left，right , top , bottom的值还能让元素向某个方向偏移，大家可以自己去尝试。</p>
<p>2.HACK的全兼容全居中代码<br>
IE8+、火狐谷歌等现在浏览器中可以用display:table-cell来进行居中，而font-size的方法则适用于IE6和IE7，结合这两者的代码如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.parent&#123;</div><div class="line">    *font-size:175.4px; /*fontsize的值为元素高度除以1.14所得结果，适合IE6、7*/</div><div class="line">    height:200px; width:200px; text-align: center;/*标准浏览器的方法*/</div><div class="line">    display: table-cell; vertical-align:middle;</div><div class="line">&#125;</div><div class="line">.child&#123;</div><div class="line">    display:inline-block;</div><div class="line">    *zoom:1; *display:inline; /*在ie6和7中实现inline-block的方法*/</div><div class="line">    *vertical-align:middle; /*使用font-size方法必须*/</div><div class="line">    font-size:12px; /*改回正常的font-size数值*/</div><div class="line">    width:50px; height:50px; background:#00f;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意<code>vertical-align:middle</code>写在父元素中才行。</p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用HEXO搭建个人博客遇到的几个问题]]></title>
      <url>http://geekarl.com/2016/08/13/firstHEXO/</url>
      <content type="html"><![CDATA[<!-- excerpt -->
<style>
    .text{
        text-indent:32px;
        display: inline-block;
    }
</style>
<h3>这套博客搭建根据<strong>hexo</strong>官网的文档和Yelee模板文档解决了90%的问题，但仍有一些小的技巧性问题值得分享</h3>
<ol>
<li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">hexo文档地址</a></li>
<li><a href="http://moxfive.coding.me/yelee/" target="_blank" rel="external">Yelee主题使用说明</a></li>
</ol>
<p><span class="text">我在本地搭建好整体的博客框架之后，通过<code>hexo clear &amp;&amp; hexo g</code>在bash中运行后已经在本地可以预览到，但是通过deoloy却提示失败，通过索引相关的提示错误信息，将hexo配置文件中的部署地址由<code>https://github.com/用户名/用户名.github.io</code>改为<code>git@github.com:用户名/用户名.github.com</code>.问题得到解决，成功部署到了github上。</span></p>
<p><span class="text">域名更改这块的内容，我主要参考的是简书上的一篇文章，同时对域名这块的知识点补了补课: <a href="http://www.jianshu.com/p/00a19bb425cb" target="_blank" rel="external">自定义域名设置</a>; 尤其是在命令行里输入ping <a href="http://username.github.io" target="_blank" rel="external">username.github.io</a>（请将username换成你的用户名）来获取IP的思维值得借鉴，不过这里我用的是github给出的那两个IP地址也没问题，所以两种方法都是可以的。建议通过阿里云万网购买的域名都可以按照这个思路来设置，截图如下:</span></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1830662-b76412650c334b19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="设置图"></p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[对列表hover效果的小探讨]]></title>
      <url>http://geekarl.com/2016/05/14/nav-hover/</url>
      <content type="html"><![CDATA[<!-- excerpt -->
<h2>有hover效果的页面导航的制作思路</h2>
<p style="text-indent:32px;">在做顶部页面导航时，很多情况下网站需要鼠标悬停的底部高亮线的效果。这部分nav一般是采用ul+lian+a的方式来做，li设置display为行内块元素。今天的想法是让这个悬停产生的线如何跟这个字的宽度相同，而不是li的宽度？</p>
<p style="text-indent:32px;">这个想法的关键在于这个悬停线统一是用伪元素来实现的，伪元素的宽度就是这个悬停线的宽度，因此css类选择器应该是 .nav ul li a:hover::after的格式。但还是出现了一些小问题，比如这个a的宽度只能是被里面文字撑开的宽度，不能设置值 一般对a就设置width:100%即可。 但导航的文字之间是有空隙的，这个是个技巧，也就是设置li的margin值，从而让导航按钮之间有个等大的间隔。 具体实现代码如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>特卖<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>儿童<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>学习机<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>加入我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>APP下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.nav</span>&#123;<span class="attribute">width</span>:<span class="number">450px</span>; <span class="attribute">height</span>:<span class="number">26px</span>; <span class="attribute">position</span>:absolute; <span class="attribute">right</span>:<span class="number">24%</span>; <span class="attribute">bottom</span>:<span class="number">18px</span>;&#125;</div><div class="line"><span class="selector-class">.nav</span> <span class="selector-tag">ul</span><span class="selector-pseudo">::after</span>&#123;<span class="attribute">content</span>: <span class="string">""</span>; <span class="attribute">display</span>: block; <span class="attribute">clear</span>:both;&#125;</div><div class="line"><span class="selector-class">.nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123; <span class="attribute">float</span>: left; <span class="attribute">height</span>:<span class="number">26px</span>; <span class="attribute">line-height</span>: <span class="number">26px</span>; <span class="attribute">position</span>:relative;<span class="attribute">margin</span>:<span class="number">0</span> <span class="number">12px</span>;&#125;</div><div class="line"><span class="selector-class">.nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;<span class="attribute">font-size</span>:<span class="number">18px</span>; <span class="attribute">color</span>:<span class="number">#464646</span>; <span class="attribute">display</span>: block; &#125;</div><div class="line"><span class="selector-class">.nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span>&#123;<span class="attribute">content</span>:<span class="string">""</span>;<span class="attribute">width</span>:<span class="number">100%</span>; </div><div class="line"><span class="attribute">border-bottom</span>:<span class="number">2px</span> solid <span class="number">#49d7e7</span>; <span class="attribute">position</span>: absolute;</div><div class="line"><span class="attribute">left</span>:<span class="number">0</span>; <span class="attribute">bottom</span>:-<span class="number">18px</span>;&#125;</div></pre></td></tr></table></figure>
<p><em>一点小记录，希望对新人有启示作用。</em></p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://geekarl.com/2016/04/13/hello-world/</url>
      <content type="html"><![CDATA[<!-- excerpt -->
<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2>Quick Start</h2>
<h3>Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3>Run server</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3>Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3>Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[404 Not Found:该页无法显示]]></title>
      <url>http://geekarl.com//404.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><style type="text/css">
    .article-title {
        font-size: 2.1em;
    }
    strong a {
        color: #747474;
    }
    .player {
        margin-left: -10px;
    }
    .sign {
        text-align: right;
        font-style: italic;
    }
    .share,
    #page-visit,
    .visit span:nth-child(2),
    .pic br {
        display: none;
    }
    .center {
        text-align: center;
        height: 2.5em;
        font-weight: bold;
    }
    .sorry{
    	color:gray;
    	font-size: 20px;
    	text-shadow: 1px 1px 3px #000;
    }
    .search2 {
        height: 2.2em;
        font-size: 1em;
        width: 50%;
        margin: auto 24%;
        color: #727272;
        opacity: .6;
        border: 2px solid lightgray;
    }
    .search2:hover {
        opacity: 1;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3)
        };
    .article-entry hr {
        margin: 0;
    }
    .pic {
        text-align: center;
        margin: 0;
    }
</style>
<hr>
<p class="center sorry">很抱歉，您所访问的地址并不存在</p>
<p class="center"><a href="/">回主页</a> · <a href="/archives">所有文章</a> · <a href="/about">留言板</a></p>
<div style="text-align: center">
以下是我在网易云音乐上搜集的一些音乐，放松一下吧~
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="320" height="330" src="http://music.163.com/outchain/player?type=0&id=10460189&auto=0&height=430"></iframe>
</div>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[博主信息]]></title>
      <url>http://geekarl.com/about/index.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><style type="text/css">
    strong a {
        color: #747474;
    }
    .blub{
        padding: 0;
        width: 100% !important;
        margin:0 auto;
        border-radius: 5px;
    }
    .player {
        text-align: center;
        margin: .5em auto 0;
        width: 100%;
        max-width: 22em;
    }
    .player br {
        display: none;
    }
    .sign {
        text-align: right;
        font-style: italic;
    }
    #ds-recent-visitors {
        margin: 0;
        padding: 0;
    }
    #ds-recent-visitors div img {
        display: inline-block !important;
        width: 60px !important;
        height: 60px !important;
        border: 1px solid #ddd;
        padding: 3px;
        box-shadow: 1px 1px 1px rgba(0,0,0, .2);
    }
    .article-entry img:first-child {
        display: block;
    }
    .article-entry span {
        font-family: Arial;
    }
    #ds-hot-posts {
        display: none;
    }

</style>
<hr>
<p><strong>我将竭尽全力地做好自己，谢谢过往，遇到的同事让我更好地认识了自己，既往不念，执着于前<span>——</span>卡少</strong></p>
<p class="sign"><span>——</span> 感谢原博主提供的模板</p>
<div class="blub">
    <img src="http://opm3cm6nh.bkt.clouddn.com/2014_February_DesignThinkingEmphatic-ApproachToProblemSolving-1600x700_1.jpg" title="Thinking">
</div>
<p><strong>博客奥义:</strong></p>
<blockquote>
<p>学习和巩固前端基本知识，本来就是喜欢这一块的东西，学而时习之；<br>
博客可以督促知识的积累和显性化，剩点笔墨，原来都写在本子上了；<br>
建立博客的过程中发现一众牛人，正好有机会切磋切磋；<br>
偶尔也写一些新的体会，不求人气，但求分享~。</p>
</blockquote>
<p><strong><a href="http://moxfive.coding.me/2015/08/28/Front-End-Study/" target="_blank" rel="external">借鉴MOxFIVE的前端学习路线:</a></strong></p>
<blockquote>
<p>这里保留链接，有待进一步学习和借鉴。</p>
</blockquote>
<p><strong>个人相关信息和经验:</strong></p>
<blockquote>
<ol>
<li>某985理工科专业，读研期间有一定编程经验，不过还有很大的进步空间；</li>
<li>虽然现在的数据结构和算法不是很强，但我已下定决心好好补课了；</li>
<li>经常折腾各种系统，装系统家常便饭，大学期间常常关注IT消息；</li>
<li>善用利用搜索解决各类问题，借大家踩过的坑过桥~；</li>
</ol>
</blockquote>
<p><strong>博客主题:</strong></p>
<blockquote>
<p>使用的是MOxFIVE创立的yelee模板，以后markdown都按照这个来写，感觉效果很漂亮</p>
</blockquote>
<p><strong>职业情况</strong></p>
<ul>
<li>刚毕业在天津做了一段时间与前端关系不大的工作，但已有所涉猎。</li>
<li>而后在天津会峰网科技有限公司做了一段时间半实习性质的工作。</li>
<li>目前就职于乐视体育的前端产品研发部门，T4的前端工程师。</li>
</ul>
<p><strong>欢迎交流:</strong></p>
<blockquote>
<p>个人邮件及社交网站等信息见边栏底部；<br>
有什么留言或问题直接在文末留下评论即可。<br>
后面把以前写的博客都转过来，以此为主阵地喽</p>
</blockquote>
<div class="player">
<iframe scrolling="auto" frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="330" src="http://music.163.com/outchain/player?type=0&id=10460189&auto=0&height=430"></iframe>
</div>
<ul class="ds-recent-visitors" data-num-items="30" data-avatar-size="60"></ul>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[all-archives]]></title>
      <url>http://geekarl.com/all-archives/index.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[all-categories]]></title>
      <url>http://geekarl.com/all-categories/index.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[all-tags]]></title>
      <url>http://geekarl.com/all-tags/index.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[分类 & 标签]]></title>
      <url>http://geekarl.com/tags/index.html</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script>]]></content>
    </entry>
    
  
</search>
